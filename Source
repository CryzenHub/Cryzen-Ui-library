local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

local UltraLordLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
		UltraLordV2 = {
			Main = Color3.fromRGB(20, 20, 35),
			Second = Color3.fromRGB(30, 30, 50),
			Stroke = Color3.fromRGB(60, 60, 100),
			Divider = Color3.fromRGB(45, 45, 85),
			Text = Color3.fromRGB(240, 240, 255),
			TextDark = Color3.fromRGB(150, 150, 200)
		},
		UltraSpaceV2 = {
			Main = Color3.fromRGB(15, 15, 30),
			Second = Color3.fromRGB(25, 25, 45),
			Stroke = Color3.fromRGB(55, 55, 95),
			Divider = Color3.fromRGB(40, 40, 80),
			Text = Color3.fromRGB(235, 235, 255),
			TextDark = Color3.fromRGB(145, 145, 195)
		},
		UltraDarkV2 = {
			Main = Color3.fromRGB(10, 10, 25),
			Second = Color3.fromRGB(20, 20, 40),
			Stroke = Color3.fromRGB(50, 50, 90),
			Divider = Color3.fromRGB(35, 35, 75),
			Text = Color3.fromRGB(230, 230, 255),
			TextDark = Color3.fromRGB(140, 140, 190)
		},
		UltraLegend = {
			Main = Color3.fromRGB(25, 25, 40),
			Second = Color3.fromRGB(35, 35, 55),
			Stroke = Color3.fromRGB(65, 65, 105),
			Divider = Color3.fromRGB(50, 50, 90),
			Text = Color3.fromRGB(245, 245, 255),
			TextDark = Color3.fromRGB(155, 155, 205)
		}
	},
	SelectedTheme = "UltraLordV2",
	Folder = nil,
	SaveCfg = false
}

local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
	warn("\Ultra Lord Library - Failed to load Feather Icons. Error code: " .. Response .. "\n")
end	

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end   

local MainUI = Instance.new("ScreenGui")
MainUI.Name = "UltraLordUI"
if syn then
	syn.protect_gui(MainUI)
	MainUI.Parent = game.CoreGui
else
	MainUI.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == MainUI.Name and Interface ~= MainUI then
			Interface:Destroy()
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == MainUI.Name and Interface ~= MainUI then
			Interface:Destroy()
		end
	end
end

function UltraLordLib:IsRunning()
	if gethui then
		return MainUI.Parent == gethui()
	else
		return MainUI.Parent == game:GetService("CoreGui")
	end
end

local function AddConnection(Signal, Function)
	if (not UltraLordLib:IsRunning()) then
		return
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(UltraLordLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while (UltraLordLib:IsRunning()) do
		wait()
	end

	for _, Connection in next, UltraLordLib.Connections do
		Connection:Disconnect()
	end
end)

local function AddDraggingFunctionality(DragPoint, Main)
    pcall(function()
        local Dragging, DragInput, MousePos, FramePos = false, nil, nil, nil
        local TouchEnabled = UserInputService.TouchEnabled
        local MobileDragDistance = 25

        local function UpdateDrag(Input)
            if Dragging then
                local Delta = Input.Position - MousePos
                local NewPos = UDim2.new(
                    FramePos.X.Scale, 
                    FramePos.X.Offset + Delta.X,
                    FramePos.Y.Scale, 
                    FramePos.Y.Offset + Delta.Y
                )
                Main.Position = NewPos
            end
        end

        DragPoint.InputBegan:Connect(function(Input)
            if (Input.UserInputType == Enum.UserInputType.MouseButton1 or 
                Input.UserInputType == Enum.UserInputType.Touch) then
                Dragging = true
                MousePos = Input.Position
                FramePos = Main.Position

                if TouchEnabled then
                    local TouchObject = Input.Position
                    local StartPos = Vector2.new(TouchObject.X, TouchObject.Y)

                    Input.Changed:Connect(function()
                        if Input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end)
                end
            end
        end)

        DragPoint.InputEnded:Connect(function(Input)
            if (Input.UserInputType == Enum.UserInputType.MouseButton1 or 
                Input.UserInputType == Enum.UserInputType.Touch) then
                Dragging = false
                DragInput = nil
            end
        end)

        UserInputService.InputChanged:Connect(function(Input)
            if (Input.UserInputType == Enum.UserInputType.MouseMovement or
                Input.UserInputType == Enum.UserInputType.Touch) and Dragging then
                DragInput = Input
                UpdateDrag(Input)
            end
        end)
    end)
end   

local function Create(Class, Properties, Children)
	local Object = Instance.new(Class)
	for Property, Value in next, Properties or {} do
		Object[Property] = Value
	end
	for _, Child in next, Children or {} do
		Child.Parent = Object
	end
	return Object
end

local function CreateSlider(Parent, Min, Max, Default, Callback)
    local Slider = Create("Frame", {
        Parent = Parent,
        BackgroundColor3 = Color3.fromRGB(30, 30, 45),
        Size = UDim2.new(1, -20, 0, 40),
        Position = UDim2.new(0, 10, 0, 0),
    }, {
        Create("UICorner", { CornerRadius = UDim.new(0, 5) }),
        Create("UIStroke", {
            Color = Color3.fromRGB(60, 60, 100),
            Thickness = 1
        })
    })

    local Fill = Create("Frame", {
        Parent = Slider,
        BackgroundColor3 = Color3.fromRGB(60, 60, 140),
        Size = UDim2.new(0, 0, 1, 0),
    }, {
        Create("UICorner", { CornerRadius = UDim.new(0, 5) })
    })

    local Value = Create("TextLabel", {
        Parent = Slider,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.9, 0, 0, 0),
        Size = UDim2.new(0.1, 0, 1, 0),
        Font = Enum.Font.FredokaOne,
        Text = tostring(Default),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
    })

    local IsDragging = false

    Slider.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            IsDragging = true
        end
    end)

    UserInputService.InputEnded:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            IsDragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(Input)
        if IsDragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
            local SliderPos = math.clamp((Input.Position.X - Slider.AbsolutePosition.X) / Slider.AbsoluteSize.X, 0, 1)
            local Value = math.floor(Min + ((Max - Min) * SliderPos))
            Fill.Size = UDim2.new(SliderPos, 0, 1, 0)
            Value.Text = tostring(Value)
            Callback(Value)
        end
    end)
end

local function CreateToggle(Parent, Default, Callback)
    local Toggle = Create("Frame", {
        Parent = Parent,
        BackgroundColor3 = Color3.fromRGB(30, 30, 45),
        Size = UDim2.new(0, 40, 0, 20),
    }, {
        Create("UICorner", { CornerRadius = UDim.new(1, 0) }),
        Create("UIStroke", {
            Color = Color3.fromRGB(60, 60, 100),
            Thickness = 1
        })
    })

    local Knob = Create("Frame", {
        Parent = Toggle,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Size = UDim2.new(0, 16, 0, 16),
        Position = Default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
    }, {
        Create("UICorner", { CornerRadius = UDim.new(0, 5) })
    })

    local State = Default

    Toggle.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            State = not State
            TweenService:Create(Knob, TweenInfo.new(0.2), {
                Position = State and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                BackgroundColor3 = State and Color3.fromRGB(60, 60, 140) or Color3.fromRGB(255, 255, 255)
            }):Play()
            TweenService:Create(Toggle, TweenInfo.new(0.2), {
                BackgroundColor3 = State and Color3.fromRGB(40, 40, 60) or Color3.fromRGB(30, 30, 45)
            }):Play()
            Callback(State)
        end
    end)
end

local function CreateElement(ElementName, ElementFunction)
	UltraLordLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	local NewElement = UltraLordLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	table.foreach(Props, function(Property, Value)
		Element[Property] = Value
	end)
	return Element
end

local function SetChildren(Element, Children)
	table.foreach(Children, function(_, Child)
		Child.Parent = Element
	end)
	return Element
end

local function Round(Number, Factor)
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 then Result = Result + Factor end
	return Result
end

local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") then
		return "BackgroundColor3"
	end 
	if Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	end 
	if Object:IsA("UIStroke") then
		return "Color"
	end 
	if Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	end   
	if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
		return "ImageColor3"
	end   
end

local function AddThemeObject(Object, Type)
	if not UltraLordLib.ThemeObjects[Type] then
		UltraLordLib.ThemeObjects[Type] = {}
	end    
	table.insert(UltraLordLib.ThemeObjects[Type], Object)
	Object[ReturnProperty(Object)] = UltraLordLib.Themes[UltraLordLib.SelectedTheme][Type]
	return Object
end    

local function SetTheme()
	for Name, Type in pairs(UltraLordLib.ThemeObjects) do
		for _, Object in pairs(Type) do
			Object[ReturnProperty(Object)] = UltraLordLib.Themes[UltraLordLib.SelectedTheme][Name]
		end    
	end    
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end    

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local Data = HttpService:JSONDecode(Config)
	table.foreach(Data, function(a,b)
		if UltraLordLib.Flags[a] then
			spawn(function() 
				if UltraLordLib.Flags[a].Type == "Colorpicker" then
					UltraLordLib.Flags[a]:Set(UnpackColor(b))
				else
					UltraLordLib.Flags[a]:Set(b)
				end    
			end)
		else
			warn("Ultra Lord Library Config Loader - Could not find ", a ,b)
		end
	end)
end

local function SaveCfg(Name)
	local Data = {}
	for i,v in pairs(UltraLordLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end	
	end
	writefile(UltraLordLib.Folder .. "/" .. Name .. ".txt", tostring(HttpService:JSONEncode(Data)))
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace}

local WindowVisible = true
local ToggleKey = Enum.KeyCode.RightControl

local MenuToggleButton = Create("ImageButton", {
    Parent = MainUI,
    Size = UDim2.new(0, 40, 0, 40),
    Position = UDim2.new(1, -50, 0, 10),
    BackgroundColor3 = Color3.fromRGB(30, 30, 45),
    Image = "rbxassetid://7072718266",
    ImageColor3 = Color3.fromRGB(240, 240, 255),
}, {
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5)
    }),
    Create("UIStroke", {
        Color = Color3.fromRGB(60, 60, 100),
        Thickness = 1.5
    })
})

MenuToggleButton.MouseEnter:Connect(function()
    TweenService:Create(MenuToggleButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    }):Play()
end)

MenuToggleButton.MouseLeave:Connect(function()
    TweenService:Create(MenuToggleButton, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(30, 30, 45)
    }):Play()
end)

MenuToggleButton.MouseButton1Click:Connect(function()
    WindowVisible = not WindowVisible
    TweenService:Create(MenuToggleButton, TweenInfo.new(0.2), {
        Rotation = WindowVisible and 0 or 180
    }):Play()

    UltraLordLib:MakeNotification({
        Name = "Menu Toggle",
        Content = WindowVisible and "Menu Opened" or "Menu Closed",
        Time = 2
    })

    if WindowVisible then
        MainUI.Enabled = true
        for _, window in ipairs(MainUI:GetChildren()) do
            if window:IsA("Frame") and window.Name == "Window" then
                window.Visible = true
                TweenService:Create(window, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Position = window.Position - UDim2.new(0, 0, 0, 10),
                    BackgroundTransparency = 0
                }):Play()
            end
        end
    else
        for _, window in ipairs(MainUI:GetChildren()) do
            if window:IsA("Frame") and window.Name == "Window" then
                TweenService:Create(window, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Position = window.Position + UDim2.new(0, 0, 0, 10),
                    BackgroundTransparency = 1
                }):Play()
                wait(0.3)
                window.Visible = false
            end
        end
        wait(0.3)
        MainUI.Enabled = false
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == ToggleKey then
        WindowVisible = not WindowVisible
        MainUI.Enabled = WindowVisible

        UltraLordLib:MakeNotification({
            Name = "Menu Toggle",
            Content = WindowVisible and "Menu Opened" or "Menu Closed",
            Time = 2
        })
    end
end)

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundColor3 = Color3.fromRGB(40, 40, 65),
		BorderSizePixel = 0,
		Font = Enum.Font.FredokaOne,
		TextSize = 14,
		TextColor3 = Color3.fromRGB(240, 240, 255),
		ClipsDescendants = true
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(0, 5)
		}),
		Create("UIStroke", {
			Color = Color3.fromRGB(60, 60, 100),
			Thickness = 1
		})
	})

	local ButtonEffect = Create("Frame", {
		Parent = Button,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 0.9,
		Size = UDim2.new(0, 0, 0, 0),
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(0, 5)
		})
	})

	Button.MouseEnter:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.2), {
			BackgroundColor3 = Color3.fromRGB(50, 50, 80)
		}):Play()
	end)

	Button.MouseLeave:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.2), {
			BackgroundColor3 = Color3.fromRGB(40, 40, 65)
		}):Play()
	end)

	Button.MouseButton1Down:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1), {
			BackgroundColor3 = Color3.fromRGB(60, 60, 100)
		}):Play()
		TweenService:Create(ButtonEffect, TweenInfo.new(0.5), {
			Size = UDim2.new(1.5, 0, 1.5, 0),
			BackgroundTransparency = 1
		}):Play()
		wait(0.5)
		ButtonEffect.Size = UDim2.new(0, 0, 0, 0)
		ButtonEffect.BackgroundTransparency = 0.9
	end)

	Button.MouseButton1Up:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1), {
			BackgroundColor3 = Color3.fromRGB(50, 50, 80)
		}):Play()
	end)

	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})

	if GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end	

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.FredokaOne,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = MainUI
})

function UltraLordLib:MakeNotification(NotificationConfig)
	spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(20, 20, 35), 0, 5), {
			Parent = NotificationParent, 
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, -55, 0, 0),
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y
		}), {
			MakeElement("Stroke", Color3.fromRGB(45, 50, 110), 1.5),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.FredokaOne,
				Name = "Title"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.FredokaOne,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})

		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		wait(NotificationConfig.Time - 0.88)
		TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
		TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.6}):Play()
		wait(0.3)
		TweenService:Create(NotificationFrame.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play()
		TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play()
		TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play()
		wait(0.05)

		NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0),'In','Quint',0.8,true)
		wait(1.35)
		NotificationFrame:Destroy()
	end)
end    

function UltraLordLib:Init()
	if UltraLordLib.SaveCfg then	
		pcall(function()
			if isfile(UltraLordLib.Folder .. "/" .. game.GameId .. ".txt") then
				LoadCfg(readfile(UltraLordLib.Folder .. "/" .. game.GameId .. ".txt"))
				UltraLordLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)		
	end	
end	

local function CreateWindow(Config)
	Config = Config or {}
	Config.Name = Config.Name or "Modern UI"
	Config.Theme = Config.Theme or "Modern"
	Config.Font = Config.Font or "FredokaOne" -- Default font
	UltraLordLib.SelectedTheme = Config.Theme

	local Window = Create("Frame", {
		Name = "Window",
		Parent = MainUI,
		BackgroundColor3 = UltraLordLib.Themes[Config.Theme].Main,
		Position = UDim2.new(0.5, -300, 0.5, -200),
		Size = UDim2.new(0, 600, 0, 400),
		ClipsDescendants = true
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(0, 5)
		}),
		Create("Frame", {
			Name = "Topbar",
			BackgroundColor3 = UltraLordLib.Themes[Config.Theme].Second,
			Size = UDim2.new(1, 0, 0, 40)
		}, {
			Create("TextLabel", {
				BackgroundTransparency = 1,
				Position = UDim2.new(0, 10, 0, 0),
				Size = UDim2.new(1, -20, 1, 0),
				Font = Enum.Font[Config.Font],
				Text = Config.Name,
				TextColor3 = Color3.fromRGB(240, 240, 255),
				TextSize = 18,
				TextXAlignment = Enum.TextXAlignment.Left
			})
		})
	})

local TabContainer = Create("ScrollingFrame", {
    Name = "TabContainer",
    Parent = Window,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 40),
    Size = UDim2.new(0, 150, 1, -40),
    ScrollBarThickness = 0,
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollingDirection = Enum.ScrollingDirection.Y,
    BorderSizePixel = 0,
    ScrollBarImageColor3 = Color3.fromRGB(60, 60, 100)
}, {
    Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder
    }),
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5)
    })
})

local ContentContainer = Create("Frame", {    Name = "ContentContainer",
    Parent = Window,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 150, 0, 40),
    Size = UDim2.new(1, -150, 1, -40),
    ClipsDescendants = true
})

--[[
    Ultra Lord UI Library V2 Guide

    -- Creating a Window:
    local Window = UltraLordLib:MakeWindow({
        Name = "My Window",
        Theme = "UltraLordV2", -- Available themes: UltraLordV2, UltraSpaceV2, UltraDarkV2, UltraLegend
        Font = "FredokaOne" -- Available fonts: FredokaOne, GothamBold, SourceSansBold
    })

    -- Creating a Tab:
    local Tab = Window:CreateTab("TabName", "rbxassetid://4384401360") -- Name, Icon ID

    -- Creating Elements:
    local Button = Tab:CreateButton("ButtonName", function()
        -- Button click callback
    end)

    local Toggle = Tab:CreateToggle("ToggleName", false, function(Value)
        -- Toggle callback
    end)

    local Slider = Tab:CreateSlider("SliderName", 0, 100, 50, function(Value)
        -- Slider callback
    end)

    -- Creating Notifications:
    UltraLordLib:MakeNotification({
        Name = "Notification Title",
        Content = "Notification Message",
        Image = "rbxassetid://4384401360",
        Time = 5
    })
]]

local function CreateTab(Name, Icon)
    local Tab = Create("TextButton", {
        Name = Name,
        Size = UDim2.new(1, 0, 0, 32),
        BackgroundColor3 = Color3.fromRGB(30, 30, 45),
        AutoButtonColor = false,
        Font = Enum.Font.FredokaOne,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Text = Name,
        TextXAlignment = Enum.TextXAlignment.Left
    }, {
        Create("UICorner", {
            CornerRadius = UDim.new(0, 5)
        }),
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 30)
        }),
        Create("ImageLabel", {
            Size = UDim2.new(0, 16, 0, 16),
            Position = UDim2.new(0, -22, 0.5, -8),
            BackgroundTransparency = 1,
            Image = Icon or "rbxassetid://4384401360",
            ImageColor3 = Color3.fromRGB(200, 200, 200)
        })
    })

    local Content = Create("ScrollingFrame", {
        Name = "Content",
        Parent = ContentContainer,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(60, 60, 100),
        Visible = false,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollingDirection = Enum.ScrollingDirection.Y
    }, {
        Create("UIListLayout", {
            Padding = UDim.new(0, 5),
            SortOrder = Enum.SortOrder.LayoutOrder
        }),
        Create("UIPadding", {
            PaddingTop = UDim.new(0, 5),
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5)
        })
    })

    Tab.MouseEnter:Connect(function()
        TweenService:Create(Tab, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(40, 40, 60)
        }):Play()
    end)

    Tab.MouseLeave:Connect(function()
        if Content.Visible then return end
        TweenService:Create(Tab, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(30, 30, 45)
        }):Play()
    end)

    -- Enhanced tab animations and interactions
    Tab.MouseButton1Click:Connect(function()
        -- Ripple effect
        local Ripple = Create("Frame", {
            Parent = Tab,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.8,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 0, 1, 0),
            AnchorPoint = Vector2.new(0, 0.5)
        }, {
            Create("UICorner", {
                CornerRadius = UDim.new(0, 5)
            })
        })

        TweenService:Create(Ripple, TweenInfo.new(0.5), {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1
        }):Play()

        game.Debris:AddItem(Ripple, 0.5)

        for _, otherTab in pairs(TabContainer:GetChildren()) do
            if otherTab:IsA("TextButton") then
                TweenService:Create(otherTab, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(30, 30, 45),
                    TextColor3 = Color3.fromRGB(200, 200, 200)
                }):Play()
                TweenService:Create(otherTab:FindFirstChildOfClass("ImageLabel"), TweenInfo.new(0.2), {
                    ImageColor3 = Color3.fromRGB(200, 200, 200)
                }):Play()
            end
        end

        for _, content in pairs(ContentContainer:GetChildren()) do
            if content:IsA("ScrollingFrame") then
                content.Visible = false
            end
        end

        TweenService:Create(Tab, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(50, 50, 80),
            TextColor3 = Color3.fromRGB(240, 240, 255)
        }):Play()
        TweenService:Create(Tab:FindFirstChildOfClass("ImageLabel"), TweenInfo.new(0.2), {
            ImageColor3 = Color3.fromRGB(240, 240, 255)
        }):Play()

        Content.Visible = true
        Content:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quart", 0.4, true)
		
		-- Remove loading screen with fade animation
		local LoadingScreen = MainUI:FindFirstChild("LoadingScreen")
		if LoadingScreen then
			TweenService:Create(LoadingScreen, TweenInfo.new(0.5), {
				BackgroundTransparency = 1
			}):Play()
			wait(0.5)
			LoadingScreen:Destroy()
		end
    end)

    if #TabContainer:GetChildren() == 2 then -- UIListLayout and UIPadding
        Tab.MouseButton1Click:Fire()
    end

    return Content
end

	local Dragging = false
	local DragStart = nil
	local StartPos = nil

	Window.Topbar.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			Dragging = true
			DragStart = Input.Position
			StartPos = Window.Position
		end
	end)

	UserInputService.InputChanged:Connect(function(Input)
		if Dragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
			local Delta = Input.Position - DragStart
			Window.Position = UDim2.new(
				StartPos.X.Scale,
				StartPos.X.Offset + Delta.X,
				StartPos.Y.Scale,
				StartPos.Y.Offset + Delta.Y
			)
		end
	end)

	Window.Topbar.InputEnded:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			Dragging = false
		end
	end)

	return Window
end

function UltraLordLib:MakeWindow(WindowConfig)
	return CreateWindow(WindowConfig)
end

function UltraLordLib:Destroy()
	MainUI:Destroy()
end

return UltraLordLib
