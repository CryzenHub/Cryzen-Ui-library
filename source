local UltraLordLib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Enhanced configuration with modern UI elements
local Config = {
    Theme = {
        Primary = Color3.fromRGB(24, 24, 28),
        Secondary = Color3.fromRGB(32, 32, 36),
        Accent = Color3.fromRGB(240, 240, 245),
        Success = Color3.fromRGB(56, 207, 137),
        Error = Color3.fromRGB(229, 57, 53),
        Highlight = Color3.fromRGB(61, 133, 224),
        Stroke = Color3.fromRGB(45, 45, 50)
    },
    Corner = {
        Small = UDim.new(0, 4),
        Medium = UDim.new(0, 6),
        Large = UDim.new(0, 8)
    },
    Animation = {
        Short = 0.15,
        Normal = 0.3,
        Long = 0.5
    },
    Shadow = {
        Elevation1 = 10,
        Elevation2 = 15,
        Elevation3 = 20
    }
}

-- Utility functions with improved animations
local function Tween(object, duration, properties)
    local tween = TweenService:Create(
        object,
        TweenInfo.new(duration, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function CreateElement(className, properties)
    local element = Instance.new(className)
    for prop, value in pairs(properties) do
        element[prop] = value
    end
    return element
end

-- Enhanced notification system
function UltraLordLib:Notify(options)
    local notif = CreateElement("Frame", {
        Name = "Notification",
        Parent = game.CoreGui,
        BackgroundColor3 = Config.Theme.Primary,
        Position = UDim2.new(1, 20, 0.85, 0),
        Size = UDim2.new(0, 280, 0, 80),
        BackgroundTransparency = 1
    })

    CreateElement("UICorner", {
        Parent = notif,
        CornerRadius = Config.Corner.Medium
    })

    CreateElement("UIStroke", {
        Parent = notif,
        Color = Config.Theme.Stroke,
        Thickness = 1,
        Transparency = 0.5
    })

    local content = CreateElement("Frame", {
        Parent = notif,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })

    local title = CreateElement("TextLabel", {
        Parent = content,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 10),
        Size = UDim2.new(1, -30, 0, 25),
        Font = Enum.Font.GothamBold,
        Text = options.Title or "Notification",
        TextColor3 = Config.Theme.Accent,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local message = CreateElement("TextLabel", {
        Parent = content,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 35),
        Size = UDim2.new(1, -30, 0, 35),
        Font = Enum.Font.Gotham,
        Text = options.Message or "",
        TextColor3 = Config.Theme.Accent,
        TextSize = 14,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    -- Smooth animation sequence
    Tween(notif, Config.Animation.Normal, {
        Position = UDim2.new(1, -300, 0.85, 0),
        BackgroundTransparency = 0
    })

    wait(options.Duration or 3)

    Tween(notif, Config.Animation.Normal, {
        Position = UDim2.new(1, 20, 0.85, 0),
        BackgroundTransparency = 1
    }).Completed:Wait()

    notif:Destroy()
end

-- Main window creation with modern styling
function UltraLordLib:CreateWindow(options)
    local window = CreateElement("ScreenGui", {
        Name = "UltraLordV5",
        Parent = game.CoreGui
    })

    local main = CreateElement("Frame", {
        Name = "Main",
        Parent = window,
        BackgroundColor3 = Config.Theme.Primary,
        Position = UDim2.new(0.5, -300, 0.5, -200),
        Size = UDim2.new(0, 600, 0, 400),
        ClipsDescendants = true
    })

    -- Enhanced shadow effect
    local shadow = CreateElement("ImageLabel", {
        Name = "Shadow",
        Parent = main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -Config.Shadow.Elevation1, 0, -Config.Shadow.Elevation1),
        Size = UDim2.new(1, Config.Shadow.Elevation1 * 2, 1, Config.Shadow.Elevation1 * 2),
        Image = "rbxassetid://6015897843",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    })

    CreateElement("UICorner", {
        Parent = main,
        CornerRadius = Config.Corner.Large
    })

    CreateElement("UIStroke", {
        Parent = main,
        Color = Config.Theme.Stroke,
        Thickness = Config.Stroke.Thin,
        Transparency = 0.5
    })

    local TitleBar = CreateElement("Frame", {
        Name = "TitleBar",
        Parent = main,
        BackgroundColor3 = Config.Theme.Secondary,
        Size = UDim2.new(1, 0, 0, 40)
    })

    CreateElement("UICorner", {
        Parent = TitleBar,
        CornerRadius = UDim.new(0, 5)
    })

    local Title = CreateElement("TextLabel", {
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -30, 1, 0),
        Font = Config.Fonts.Title,
        Text = windowConfig.Title,
        TextColor3 = Config.Theme.Accent,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    -- Enhanced dragging with inertia and bounds checking
    local isDragging = {
        frame = false,
        menu = false
    }
    local dragStart = nil
    local startPos = nil
    local dragVelocity = Vector2.new(0, 0)
    local lastMousePos = nil
    local dampening = 0.85

    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging.frame = true
            dragStart = input.Position
            startPos = main.Position
            lastMousePos = input.Position
            dragVelocity = Vector2.new(0, 0)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if isDragging.frame and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(
                startPos.X.Scale,
                math.clamp(startPos.X.Offset + delta.X, -main.AbsoluteSize.X/2, game.Workspace.CurrentCamera.ViewportSize.X - main.AbsoluteSize.X/2),
                startPos.Y.Scale,
                math.clamp(startPos.Y.Offset + delta.Y, 0, game.Workspace.CurrentCamera.ViewportSize.Y - main.AbsoluteSize.Y)
            )

            dragVelocity = (input.Position - lastMousePos) / UserInputService.DeltaTime
            lastMousePos = input.Position

            main.Position = newPos
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and isDragging.frame then
            isDragging.frame = false

            -- Apply inertia
            local function applyInertia()
                if dragVelocity.Magnitude > 1 then
                    local newPos = UDim2.new(
                        main.Position.X.Scale,
                        math.clamp(main.Position.X.Offset + dragVelocity.X * 0.016, -main.AbsoluteSize.X/2, game.Workspace.CurrentCamera.ViewportSize.X - main.AbsoluteSize.X/2),
                        main.Position.Y.Scale,
                        math.clamp(main.Position.Y.Offset + dragVelocity.Y * 0.016, 0, game.Workspace.CurrentCamera.ViewportSize.Y - main.AbsoluteSize.Y)
                    )

                    Tween(main, Config.Animation.Short, {
                        Position = newPos
                    })

                    dragVelocity = dragVelocity * dampening
                    if dragVelocity.Magnitude > 1 then
                        game:GetService("RunService").Heartbeat:Wait()
                        applyInertia()
                    end
                end
            end

            applyInertia()
        end
    end)

    -- Menu Toggle with improved animation and dragging
    local MenuToggle = CreateElement("ImageButton", {
        Name = "MenuToggle",
        Parent = window,
        BackgroundColor3 = Config.Theme.Primary,
        Position = Config.MenuToggle.Position,
        Size = Config.MenuToggle.Size,
        Image = Config.MenuToggle.Image,
        BackgroundTransparency = Config.MenuToggle.Transparency,
        ImageTransparency = Config.MenuToggle.Transparency,
        ZIndex = 999
    })

    -- Add dragging functionality to MenuToggle
    local isDraggingMenu = false
    local menuDragStart = nil
    local menuStartPos = nil

    MenuToggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then  -- Right click to drag
            isDragging.menu = true
            menuDragStart = input.Position
            menuStartPos = MenuToggle.Position
        end
    end)

    local function updateMenuPosition(input)
        if isDragging.menu and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - menuDragStart
            local newPos = UDim2.new(
                menuStartPos.X.Scale,
                math.clamp(menuStartPos.X.Offset + delta.X, 0, game.Workspace.CurrentCamera.ViewportSize.X - MenuToggle.AbsoluteSize.X),
                menuStartPos.Y.Scale,
                math.clamp(menuStartPos.Y.Offset + delta.Y, 0, game.Workspace.CurrentCamera.ViewportSize.Y - MenuToggle.AbsoluteSize.Y)
            )
            MenuToggle.Position = newPos
        end
    end

    UserInputService.InputChanged:Connect(updateMenuPosition)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            isDragging.menu = false
        end
    end)

    CreateElement("UICorner", {
        Parent = MenuToggle,
        CornerRadius = UDim.new(0, 5)
    })

    local isMenuVisible = true
    MenuToggle.MouseButton1Click:Connect(function()
        isMenuVisible = not isMenuVisible
        if isMenuVisible then
            main.Visible = true
            Tween(main, Config.Animation.Normal, {
                Position = UDim2.new(0.5, -300, 0.5, -200)
            })
        else
            Tween(main, Config.Animation.Normal, {
                Position = UDim2.new(1.5, 0, 0.5, -200)
            }).Completed:Wait()
            main.Visible = false
        end
    end)

    -- Enhanced hover effects
    MenuToggle.MouseEnter:Connect(function()
        Tween(MenuToggle, Config.Animation.Short, {
            BackgroundTransparency = Config.MenuToggle.HoverTransparency,
            ImageTransparency = Config.MenuToggle.HoverTransparency,
            Size = UDim2.new(0, 42, 0, 42)  -- Slight scale up
        })
    end)

    MenuToggle.MouseLeave:Connect(function()
        Tween(MenuToggle, Config.Animation.Short, {
            BackgroundTransparency = Config.MenuToggle.Transparency,
            ImageTransparency = Config.MenuToggle.Transparency,
            Size = Config.MenuToggle.Size  -- Return to original size
        })
    end)

    local TabHolder = CreateElement("Frame", {
        Name = "TabHolder",
        Parent = main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 40),
        Size = UDim2.new(0, 120, 0, 250)
    })

    local ContentHolder = CreateElement("Frame", {
        Name = "ContentHolder",
        Parent = main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 135, 0, 40),
        Size = UDim2.new(0, 355, 0, 250)
    })

    local TabList = CreateElement("UIListLayout", {
        Parent = TabHolder,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })

    local Window = {}

    function Window:AddTab(name)
        local tab = CreateElement("TextButton", {
            Name = name,
            Parent = TabHolder,
            BackgroundColor3 = Config.Theme.Secondary,
            Size = UDim2.new(1, 0, 0, 30),
            Text = name,
            TextColor3 = Config.Theme.Accent,
            Font = Config.Fonts.Button,
            TextSize = 14
        })

        CreateElement("UICorner", {
            Parent = tab,
            CornerRadius = UDim.new(0, 5)
        })

        local container = CreateElement("ScrollingFrame", {
            Name = name.."Container",
            Parent = ContentHolder,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 4,
            Visible = false
        })

        CreateElement("UIListLayout", {
            Parent = container,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        })

        local TabFunctions = {}

        function TabFunctions:AddButton(options)
            local button = CreateElement("TextButton", {
                Parent = container,
                BackgroundColor3 = Config.Theme.Secondary,
                Size = UDim2.new(1, -10, 0, 30),
                Text = options.Name,
                TextColor3 = Config.Theme.Accent,
                Font = Config.Fonts.Button,
                TextSize = 14
            })

            CreateElement("UICorner", {
                Parent = button,
                CornerRadius = UDim.new(0, 5)
            })

            -- Button hover effect
            button.MouseEnter:Connect(function()
                Tween(button, Config.Animation.Short, {
                    BackgroundColor3 = Config.Theme.Highlight,
                    Size = UDim2.new(1, -8, 0, 32)  -- Slight scale up
                })
            end)

            button.MouseLeave:Connect(function()
                Tween(button, Config.Animation.Short, {
                    BackgroundColor3 = Config.Theme.Secondary,
                    Size = UDim2.new(1, -10, 0, 30)  -- Return to original size
                })
            end)

            button.MouseButton1Click:Connect(options.Callback)
            return button
        end

        function TabFunctions:AddToggle(options)
            local toggle = CreateElement("Frame", {
                Parent = container,
                BackgroundColor3 = Config.Theme.Secondary,
                Size = UDim2.new(1, -10, 0, 30)
            })

            CreateElement("UICorner", {
                Parent = toggle,
                CornerRadius = UDim.new(0, 5)
            })

            local button = CreateElement("TextButton", {
                Parent = toggle,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = options.Name,
                TextColor3 = Config.Theme.Accent,
                Font = Config.Fonts.Button,
                TextSize = 14
            })

            local status = CreateElement("Frame", {
                Parent = toggle,
                BackgroundColor3 = options.Default and Config.Theme.Success or Config.Theme.Error,
                Position = UDim2.new(1, -25, 0.5, -5),
                Size = UDim2.new(0, 10, 0, 10)
            })

            CreateElement("UICorner", {
                Parent = status,
                CornerRadius = UDim.new(0, 5)
            })

            local enabled = options.Default or false
            button.MouseButton1Click:Connect(function()
                enabled = not enabled
                Tween(status, Config.Animation.Short, {
                    BackgroundColor3 = enabled and Config.Theme.Success or Config.Theme.Error,
                    Size = UDim2.new(0, enabled and 12 or 10, 0, enabled and 12 or 10),  -- Scale effect
                    Position = UDim2.new(1, -25, 0.5, enabled and -6 or -5)
                })
                options.Callback(enabled)
            end)

            return toggle
        end

        function TabFunctions:AddLabel(options)
            local label = CreateElement("TextLabel", {
                Parent = container,
                BackgroundColor3 = Config.Theme.Secondary,
                Size = UDim2.new(1, -10, 0, 30),
                Text = options.Text,
                TextColor3 = Config.Theme.Accent,
                Font = Config.Fonts.Text,
                TextSize = 14
            })

            CreateElement("UICorner", {
                Parent = label,
                CornerRadius = UDim.new(0, 5)
            })

            return label
        end

        function TabFunctions:AddParagraph(options)
            local paragraph = CreateElement("TextLabel", {
                Parent = container,
                BackgroundColor3 = Config.Theme.Secondary,
                Size = UDim2.new(1, -10, 0, 0),
                Text = options.Text,
                TextColor3 = Config.Theme.Accent,
                Font = Config.Fonts.Text,
                TextSize = 14,
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top
            })

            CreateElement("UIPadding", {
                Parent = paragraph,
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingTop = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10)
            })

            CreateElement("UICorner", {
                Parent = paragraph,
                CornerRadius = UDim.new(0, 5)
            })

            return paragraph
        end

        function TabFunctions:AddInput(options)
            local inputFrame = CreateElement("Frame", {
                Parent = container,
                BackgroundColor3 = Config.Theme.InputBackground,
                Size = UDim2.new(1, -10, 0, 35)
            })

            CreateElement("UICorner", {
                Parent = inputFrame,
                CornerRadius = Config.Corner.Medium
            })

            CreateElement("UIStroke", {
                Parent = inputFrame,
                Color = Config.Theme.Stroke,
                Thickness = Config.Stroke.Thin
            })

            local input = CreateElement("TextBox", {
                Parent = inputFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Text = options.Default or "",
                PlaceholderText = options.Placeholder or "Enter text...",
                TextColor3 = Config.Theme.Accent,
                PlaceholderColor3 = Color3.fromRGB(150, 150, 150),
                Font = Config.Fonts.Text,
                TextSize = 14,
                ClearTextOnFocus = options.ClearOnFocus or false
            })

            input.Focused:Connect(function()
                Tween(inputFrame, Config.Animation.Short, {
                    BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                })
            end)

            input.FocusLost:Connect(function(enterPressed)
                Tween(inputFrame, Config.Animation.Short, {
                    BackgroundColor3 = Config.Theme.InputBackground
                })
                if enterPressed and options.Callback then
                    options.Callback(input.Text)
                end
            end)

            return inputFrame
        end

        function TabFunctions:AddSlider(options)
            local slider = CreateElement("Frame", {
                Parent = container,
                BackgroundColor3 = Config.Theme.Secondary,
                Size = UDim2.new(1, -10, 0, 45)
            })

            CreateElement("UICorner", {
                Parent = slider,
                CornerRadius = UDim.new(0, 5)
            })

            local title = CreateElement("TextLabel", {
                Parent = slider,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Text = options.Name,
                TextColor3 = Config.Theme.Accent,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Config.Fonts.Text,
                TextSize = 14
            })

            local bar = CreateElement("Frame", {
                Parent = slider,
                BackgroundColor3 = Color3.fromRGB(50, 50, 50),
                Position = UDim2.new(0, 10, 0, 25),
                Size = UDim2.new(1, -20, 0, 5)
            })

            CreateElement("UICorner", {
                Parent = bar,
                CornerRadius = UDim.new(0, 5)
            })

            local button = CreateElement("TextButton", {
                Parent = bar,
                BackgroundColor3 = Config.Theme.Accent,
                Size = UDim2.new(0, 10, 0, 15),
                Position = UDim2.new(0, -5, 0.5, -7.5),
                Text = ""
            })

            CreateElement("UICorner", {
                Parent = button,
                CornerRadius = UDim.new(0, 5)
            })

            local value = CreateElement("TextLabel", {
                Parent = slider,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -40, 0, 0),
                Size = UDim2.new(0, 30, 0, 20),
                Text = tostring(options.Default or options.Min),
                TextColor3 = Config.Theme.Accent,
                Font = Config.Fonts.Text,
                TextSize = 14
            })

            local function update(input)
                local pos = UDim2.new(
                    math.clamp(
                        (input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X,
                        0,
                        1
                    ),
                    -5,
                    0.5,
                    -7.5
                )
                button.Position = pos
                local val = math.floor(((pos.X.Scale * (options.Max - options.Min)) + options.Min) * 100) / 100
                value.Text = tostring(val)
                options.Callback(val)
            end

            local dragging = false
            local connection

            button.MouseButton1Down:Connect(function()
                dragging = true
                if connection then connection:Disconnect() end

                connection = UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        update(input)
                    end
                end)

                Tween(button, Config.Animation.Short, {
                    Size = UDim2.new(0, 12, 0, 17)
                })
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and dragging then
                    dragging = false
                    if connection then
                        connection:Disconnect()
                        connection = nil
                    end
                    Tween(button, Config.Animation.Short, {
                        Size = UDim2.new(0, 10, 0, 15)
                    })
                end
            end)

            return slider
        end

        tab.MouseButton1Click:Connect(function()
            for _, t in pairs(TabHolder:GetChildren()) do
                if t:IsA("TextButton") then
                    Tween(t, Config.Animation.Short, {
                        BackgroundColor3 = t == tab and Config.Theme.Accent or Config.Theme.Secondary,
                        TextColor3 = t == tab and Config.Theme.Primary or Config.Theme.Accent,
                        Size = t == tab and UDim2.new(1, 0, 0, 32) or UDim2.new(1, 0, 0, 30)  -- Scale effect
                    })
                end
            end

            for _, c in pairs(ContentHolder:GetChildren()) do
                if c:IsA("ScrollingFrame") then
                    if c == container then
                        c.Visible = true
                        c.Position = UDim2.new(1, 0, 0, 0)
                        Tween(c, Config.Animation.Normal, {
                            Position = UDim2.new(0, 0, 0, 0)
                        })
                    else
                        Tween(c, Config.Animation.Normal, {
                            Position = UDim2.new(-1, 0, 0, 0)
                        }).Completed:Connect(function()
                            c.Visible = false
                        end)
                    end
                end
            end
        end)

        if #TabHolder:GetChildren() == 1 then
            tab.BackgroundColor3 = Config.Theme.Accent
            tab.TextColor3 = Config.Theme.Primary
            container.Visible = true
        end

        return TabFunctions
    end

    return Window
end

return UltraLordLib
