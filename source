--[[
    CryzenHub UI Library v1.0.0 Alpha
    A simple yet powerful UI library for Roblox Lua (Luau)
    
    Features:
    - Windows with draggable functionality
    - Tabs system
    - Buttons, Toggles, Sliders, Dropdowns, and Text Input elements
    - Smooth animations and modern design
    - Easy to use API
]]

local CryzenHub = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function tween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Create the main UI
function CryzenHub:CreateWindow(config)
    config = config or {}
    local title = config.Title or "CryzenHub"
    local size = config.Size or UDim2.new(0, 500, 0, 350)
    local theme = config.Theme or {
        Background = Color3.fromRGB(30, 30, 30),
        Accent = Color3.fromRGB(0, 120, 215),
        Text = Color3.fromRGB(255, 255, 255),
        SecondaryBackground = Color3.fromRGB(40, 40, 40),
        ElementBackground = Color3.fromRGB(50, 50, 50)
    }
    
    -- Create main UI components
    local ScreenGui = createInstance("ScreenGui", {
        Name = "CryzenHub",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = game.CoreGui
    })
    
    local MainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = size,
        Position = UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2),
        BackgroundColor3 = theme.Background,
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    
    local UICorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = MainFrame
    })
    
    local UIStroke = createInstance("UIStroke", {
        Color = theme.Accent,
        Thickness = 1,
        Parent = MainFrame
    })
    
    local TitleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 35),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = theme.Accent,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TitleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = TitleBar
    })
    
    local TitleText = createInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = theme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleBar
    })
    
    local CloseButton = createInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -30, 0, 5),
        BackgroundTransparency = 1,
        Text = "âœ•",
        TextColor3 = theme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        Parent = TitleBar
    })
    
    -- Fix the TitleBar corners
    local FixTitleCorners = createInstance("Frame", {
        Name = "FixTitleCorners",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 1, -5),
        BackgroundColor3 = theme.Accent,
        BorderSizePixel = 0,
        Parent = TitleBar
    })
    
    -- Container for tabs and content
    local TabContainer = createInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 120, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = theme.SecondaryBackground,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TabListLayout = createInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    local TabPadding = createInstance("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    local ContentContainer = createInstance("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -130, 1, -45),
        Position = UDim2.new(0, 125, 0, 40),
        BackgroundColor3 = theme.Background,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = MainFrame
    })
    
    -- Make the window draggable
    local isDragging = false
    local dragInput
    local dragStart
    local startPosition
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            dragStart = input.Position
            startPosition = MainFrame.Position
        end
    end)
    
    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and isDragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPosition.X.Scale, 
                startPosition.X.Offset + delta.X, 
                startPosition.Y.Scale, 
                startPosition.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragInput = input
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        tween(MainFrame, {Position = UDim2.new(0.5, -size.X.Offset/2, 1.5, 0)}, 0.5)
        wait(0.5)
        ScreenGui:Destroy()
    end)
    
    -- Window API
    local window = {}
    local tabs = {}
    local currentTab = nil
    
    function window:CreateTab(name)
        local tabButton = createInstance("TextButton", {
            Name = name.."Tab",
            Size = UDim2.new(1, 0, 0, 32),
            BackgroundColor3 = theme.ElementBackground,
            BorderSizePixel = 0,
            Text = name,
            TextColor3 = theme.Text,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            Parent = TabContainer
        })
        
        local tabButtonCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = tabButton
        })
        
        local tabPage = createInstance("ScrollingFrame", {
            Name = name.."Page",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = theme.Accent,
            Visible = false,
            Parent = ContentContainer
        })
        
        local elementLayout = createInstance("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Parent = tabPage
        })
        
        local elementPadding = createInstance("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 10),
            Parent = tabPage
        })
        
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.Visible = false
                
                for _, tab in pairs(tabs) do
                    if tab.Button == tabButton then
                        tween(tab.Button, {BackgroundColor3 = theme.Accent})
                    else
                        tween(tab.Button, {BackgroundColor3 = theme.ElementBackground})
                    end
                end
            end
            
            tabPage.Visible = true
            currentTab = tabPage
        end)
        
        local tab = {
            Button = tabButton,
            Container = tabPage
        }
        
        table.insert(tabs, tab)
        
        -- If this is the first tab, select it
        if #tabs == 1 then
            tabButton.BackgroundColor3 = theme.Accent
            tabPage.Visible = true
            currentTab = tabPage
        end
        
        -- Tab API
        local tabAPI = {}
        
        function tabAPI:CreateButton(config)
            config = config or {}
            local text = config.Text or "Button"
            local callback = config.Callback or function() end
            
            local buttonFrame = createInstance("Frame", {
                Name = text.."ButtonFrame",
                Size = UDim2.new(1, -10, 0, 35),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            local buttonCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = buttonFrame
            })
            
            local button = createInstance("TextButton", {
                Name = text.."Button",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                Parent = buttonFrame
            })
            
            button.MouseButton1Click:Connect(function()
                tween(buttonFrame, {BackgroundColor3 = theme.Accent}, 0.2)
                callback()
                wait(0.2)
                tween(buttonFrame, {BackgroundColor3 = theme.ElementBackground}, 0.2)
            end)
            
            return button
        end
        
        function tabAPI:CreateToggle(config)
            config = config or {}
            local text = config.Text or "Toggle"
            local default = config.Default or false
            local callback = config.Callback or function() end
            
            local toggleFrame = createInstance("Frame", {
                Name = text.."ToggleFrame",
                Size = UDim2.new(1, -10, 0, 35),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            local toggleCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = toggleFrame
            })
            
            local toggleLabel = createInstance("TextLabel", {
                Name = "ToggleLabel",
                Size = UDim2.new(1, -50, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleFrame
            })
            
            local toggleButton = createInstance("Frame", {
                Name = "ToggleButton",
                Size = UDim2.new(0, 36, 0, 18),
                Position = UDim2.new(1, -46, 0.5, -9),
                BackgroundColor3 = default and theme.Accent or Color3.fromRGB(100, 100, 100),
                BorderSizePixel = 0,
                Parent = toggleFrame
            })
            
            local toggleButtonCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = toggleButton
            })
            
            local toggleCircle = createInstance("Frame", {
                Name = "ToggleCircle",
                Size = UDim2.new(0, 14, 0, 14),
                Position = UDim2.new(default and 1 or 0, default and -16 or 2, 0.5, -7),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Parent = toggleButton
            })
            
            local toggleCircleCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = toggleCircle
            })
            
            local toggled = default
            
            local function updateToggle()
                toggled = not toggled
                tween(toggleCircle, {Position = toggled and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7)}, 0.2)
                tween(toggleButton, {BackgroundColor3 = toggled and theme.Accent or Color3.fromRGB(100, 100, 100)}, 0.2)
                callback(toggled)
            end
            
            toggleButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    updateToggle()
                end
            end)
            
            local toggleAPI = {}
            
            function toggleAPI:Set(value)
                if toggled ~= value then
                    updateToggle()
                end
            end
            
            function toggleAPI:Get()
                return toggled
            end
            
            return toggleAPI
        end
        
        function tabAPI:CreateSlider(config)
            config = config or {}
            local text = config.Text or "Slider"
            local min = config.Min or 0
            local max = config.Max or 100
            local default = math.clamp(config.Default or min, min, max)
            local callback = config.Callback or function() end
            local precise = config.Precise or false
            
            local sliderFrame = createInstance("Frame", {
                Name = text.."SliderFrame",
                Size = UDim2.new(1, -10, 0, 50),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            local sliderCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = sliderFrame
            })
            
            local sliderLabel = createInstance("TextLabel", {
                Name = "SliderLabel",
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderFrame
            })
            
            local sliderValueLabel = createInstance("TextLabel", {
                Name = "SliderValueLabel",
                Size = UDim2.new(0, 50, 0, 20),
                Position = UDim2.new(1, -60, 0, 5),
                BackgroundTransparency = 1,
                Text = tostring(default),
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Right,
                Parent = sliderFrame
            })
            
            local sliderBackground = createInstance("Frame", {
                Name = "SliderBackground",
                Size = UDim2.new(1, -20, 0, 8),
                Position = UDim2.new(0, 10, 0, 30),
                BackgroundColor3 = Color3.fromRGB(60, 60, 60),
                BorderSizePixel = 0,
                Parent = sliderFrame
            })
            
            local sliderBackgroundCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderBackground
            })
            
            local sliderFill = createInstance("Frame", {
                Name = "SliderFill",
                Size = UDim2.new(((default - min) / (max - min)), 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = theme.Accent,
                BorderSizePixel = 0,
                Parent = sliderBackground
            })
            
            local sliderFillCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderFill
            })
            
            local sliderButton = createInstance("TextButton", {
                Name = "SliderButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "",
                Parent = sliderBackground
            })
            
            local value = default
            
            local function updateSlider(input)
                local sizeX = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
                local newValue = min + ((max - min) * sizeX)
                
                if not precise then
                    newValue = math.floor(newValue)
                else
                    newValue = math.floor(newValue * 100) / 100
                end
                
                value = newValue
                sliderValueLabel.Text = tostring(value)
                tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1)
                callback(value)
            end
            
            sliderButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(changedInput)
                        if changedInput.UserInputType == Enum.UserInputType.MouseMovement then
                            updateSlider(changedInput)
                        end
                    end)
                    
                    UserInputService.InputEnded:Connect(function(endedInput)
                        if endedInput.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then
                                connection:Disconnect()
                            end
                        end
                    end)
                    
                    updateSlider(input)
                end
            end)
            
            local sliderAPI = {}
            
            function sliderAPI:Set(newValue)
                newValue = math.clamp(newValue, min, max)
                if not precise then
                    newValue = math.floor(newValue)
                else
                    newValue = math.floor(newValue * 100) / 100
                end
                
                value = newValue
                sliderValueLabel.Text = tostring(value)
                tween(sliderFill, {Size = UDim2.new(((value - min) / (max - min)), 0, 1, 0)}, 0.1)
                callback(value)
            end
            
            function sliderAPI:Get()
                return value
            end
            
            return sliderAPI
        end
        
        function tabAPI:CreateDropdown(config)
            config = config or {}
            local text = config.Text or "Dropdown"
            local options = config.Options or {}
            local default = config.Default or nil
            local callback = config.Callback or function() end
            
            local dropdownFrame = createInstance("Frame", {
                Name = text.."DropdownFrame",
                Size = UDim2.new(1, -10, 0, 35),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Parent = tabPage
            })
            
            local dropdownCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = dropdownFrame
            })
            
            local dropdownLabel = createInstance("TextLabel", {
                Name = "DropdownLabel",
                Size = UDim2.new(1, -30, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownFrame
            })
            
            local dropdownArrow = createInstance("TextLabel", {
                Name = "DropdownArrow",
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(1, -25, 0.5, -10),
                BackgroundTransparency = 1,
                Text = "â–¼",
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                Parent = dropdownFrame
            })
            
            local dropdownButton = createInstance("TextButton", {
                Name = "DropdownButton",
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Text = "",
                Parent = dropdownFrame
            })
            
            local dropdownContent = createInstance("Frame", {
                Name = "DropdownContent",
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 35),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                Parent = dropdownFrame
            })
            
            local dropdownContentLayout = createInstance("UIListLayout", {
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = dropdownContent
            })
            
            local selectedOption = createInstance("TextLabel", {
                Name = "SelectedOption",
                Size = UDim2.new(1, -50, 0, 35),
                Position = UDim2.new(0, 40, 0, 0),
                BackgroundTransparency = 1,
                Text = default or "",
                TextColor3 = theme.Accent,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Right,
                Parent = dropdownFrame
            })
            
            local isOpen = false
            local selected = default
            
            local function updateDropdown()
                isOpen = not isOpen
                
                local contentSize = 0
                for _, option in pairs(options) do
                    contentSize = contentSize + 30
                end
                
                if isOpen then
                    tween(dropdownArrow, {Rotation = 180}, 0.2)
                    tween(dropdownFrame, {Size = UDim2.new(1, -10, 0, 35 + contentSize)}, 0.2)
                else
                    tween(dropdownArrow, {Rotation = 0}, 0.2)
                    tween(dropdownFrame, {Size = UDim2.new(1, -10, 0, 35)}, 0.2)
                end
            end
            
            dropdownButton.MouseButton1Click:Connect(updateDropdown)
            
            -- Create option buttons
            for i, option in pairs(options) do
                local optionButton = createInstance("TextButton", {
                    Name = option.."Option",
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Text = option,
                    TextColor3 = theme.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    Parent = dropdownContent
                })
                
                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    selectedOption.Text = option
                    callback(option)
                    updateDropdown()
                end)
                
                -- If this is the default option, select it
                if option == default then
                    selected = option
                    selectedOption.Text = option
                end
            end
            
            local dropdownAPI = {}
            
            function dropdownAPI:Set(option)
                if table.find(options, option) then
                    selected = option
                    selectedOption.Text = option
                    callback(option)
                end
            end
            
            function dropdownAPI:Get()
                return selected
            end
            
            function dropdownAPI:Refresh(newOptions, newDefault)
                options = newOptions or options
                
                -- Clear existing options
                for _, child in pairs(dropdownContent:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Add new options
                for i, option in pairs(options) do
                    local optionButton = createInstance("TextButton", {
                        Name = option.."Option",
                        Size = UDim2.new(1, 0, 0, 30),
                        BackgroundTransparency = 1,
                        Text = option,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        Parent = dropdownContent
                    })
                    
                    optionButton.MouseButton1Click:Connect(function()
                        selected = option
                        selectedOption.Text = option
                        callback(option)
                        updateDropdown()
                    end)
                end
                
                -- Update default if provided
                if newDefault and table.find(options, newDefault) then
                    selected = newDefault
                    selectedOption.Text = newDefault
                end
            end
            
            return dropdownAPI
        end
        
        function tabAPI:CreateInput(config)
            config = config or {}
            local text = config.Text or "Input"
            local placeholder = config.Placeholder or "Enter text..."
            local default = config.Default or ""
            local callback = config.Callback or function() end
            
            local inputFrame = createInstance("Frame", {
                Name = text.."InputFrame",
                Size = UDim2.new(1, -10, 0, 60),
                BackgroundColor3 = theme.ElementBackground,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            local inputCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = inputFrame
            })
            
            local inputLabel = createInstance("TextLabel", {
                Name = "InputLabel",
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = inputFrame
            })
            
            local inputBox = createInstance("TextBox", {
                Name = "InputBox",
                Size = UDim2.new(1, -20, 0, 25),
                Position = UDim2.new(0, 10, 0, 30),
                BackgroundColor3 = theme.Background,
                BorderSizePixel = 0,
                Text = default,
                PlaceholderText = placeholder,
                TextColor3 = theme.Text,
                PlaceholderColor3 = Color3.fromRGB(120, 120, 120),
                TextSize = 14,
                Font = Enum.Font.Gotham,
                ClearTextOnFocus = false,
                Parent = inputFrame
            })
            
            local inputBoxCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = inputBox
            })
            
            inputBox.FocusLost:Connect(function(enterPressed)
                callback(inputBox.Text)
            end)
            
            local inputAPI = {}
            
            function inputAPI:Set(value)
                inputBox.Text = value
                callback(value)
            end
            
            function inputAPI:Get()
                return inputBox.Text
            end
            
            return inputAPI
        end
        
        function tabAPI:CreateLabel(config)
            config = config or {}
            local text = config.Text or "Label"
            
            local labelFrame = createInstance("Frame", {
                Name = "LabelFrame",
                Size = UDim2.new(1, -10, 0, 25),
                BackgroundTransparency = 1,
                Parent = tabPage
            })
            
            local label = createInstance("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                Parent = labelFrame
            })
            
            local labelAPI = {}
            
            function labelAPI:Set(value)
                label.Text = value
            end
            
            function labelAPI:Get()
                return label.Text
            end
            
            return labelAPI
        end
        
        function tabAPI:CreateDivider()
            local dividerFrame = createInstance("Frame", {
                Name = "Divider",
                Size = UDim2.new(1, -20, 0, 1),
                BackgroundColor3 = theme.SecondaryBackground,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            return dividerFrame
        end
        
        return tabAPI
    end
    
    return window
end

return CryzenHub
