--[[
    CryzenHub UI Library v1.1.0 Beta
    A premium UI library for Roblox Lua (Luau)
    
    Changelog v1.1.0 Beta:
    - Complete UI redesign with modern flat style
    - Added key system with server verification
    - Added tabbed windows support
    - Added search functionality for elements
    - Added rich text support for labels
    - Added tooltips for all elements
    - Added animations and transitions
    - Added UI scaling and responsiveness
    - Improved performance with optimized rendering
    - Added custom scrollbar design
    - Added support for mobile devices
    - Added loading screen and splash animation
]]

local CryzenHub = {
    Version = "1.1.0-beta",
    KeySystem = true, -- Enable/disable key system
    KeySettings = {
        Title = "CryzenHub Key System",
        Subtitle = "Key verification required",
        Note = "Get your key from discord.gg/cryzen",
        SaveKey = true, -- The key saves in a file
        GrabKeyFromSite = false, -- Get key from a site
        Key = {"CRYZEN-DEMO", "BETA-TESTER"}, -- List of working keys
        FileName = "CryzenHubKey", -- File name for saved key
        KeyUrl = "https://pastebin.com/raw/YOURCODE", -- URL for key if GrabKeyFromSite is true
        MaxAttempts = 5 -- Max incorrect key attempts before closing
    }
}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ContentProvider = game:GetService("ContentProvider")

-- Local variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Viewport = workspace.CurrentCamera.ViewportSize
local DeviceData = {
    IsMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled,
    IsPC = not UserInputService.TouchEnabled and UserInputService.KeyboardEnabled,
    IsGamepad = UserInputService.GamepadEnabled
}

-- Preload assets for smoother UI experience
local PreloadAssets = {
    "rbxassetid://7072718412", -- Close icon
    "rbxassetid://7072718444", -- Minimize icon
    "rbxassetid://7072725299", -- Settings icon
    "rbxassetid://7072717857", -- Check icon
    "rbxassetid://7072715646", -- Arrow icon
    "rbxassetid://7072714922", -- Search icon
    "rbxassetid://7072719338", -- Info icon
    "rbxassetid://7072724538", -- Warning icon
    "rbxassetid://7072719752", -- Error icon
    "rbxassetid://7072718642", -- Success icon
}

-- Preload assets
for _, asset in ipairs(PreloadAssets) do
    ContentProvider:PreloadAsync({asset})
end

-- Theme presets
CryzenHub.Themes = {
    Default = {
        Primary = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(25, 25, 25),
        Tertiary = Color3.fromRGB(40, 40, 40),
        Accent = Color3.fromRGB(0, 120, 215),
        AccentDark = Color3.fromRGB(0, 95, 175),
        Text = Color3.fromRGB(240, 240, 240),
        SubText = Color3.fromRGB(170, 170, 170),
        Border = Color3.fromRGB(60, 60, 60),
        PlaceholderText = Color3.fromRGB(120, 120, 120),
        Element = Color3.fromRGB(45, 45, 45),
        ElementBorder = Color3.fromRGB(55, 55, 55),
        InactiveElement = Color3.fromRGB(65, 65, 65),
        Hover = Color3.fromRGB(50, 50, 50),
        ElementBackground = Color3.fromRGB(35, 35, 35),
        Notification = {
            Success = Color3.fromRGB(40, 200, 120),
            Warning = Color3.fromRGB(255, 150, 40),
            Error = Color3.fromRGB(220, 60, 60),
            Info = Color3.fromRGB(60, 145, 255)
        },
        Shadow = {
            Light = Color3.fromRGB(0, 0, 0),
            Dark = Color3.fromRGB(0, 0, 0)
        }
    },
    Light = {
        Primary = Color3.fromRGB(240, 240, 240),
        Secondary = Color3.fromRGB(235, 235, 235),
        Tertiary = Color3.fromRGB(225, 225, 225),
        Accent = Color3.fromRGB(0, 120, 215),
        AccentDark = Color3.fromRGB(0, 95, 175),
        Text = Color3.fromRGB(40, 40, 40),
        SubText = Color3.fromRGB(80, 80, 80),
        Border = Color3.fromRGB(200, 200, 200),
        PlaceholderText = Color3.fromRGB(150, 150, 150),
        Element = Color3.fromRGB(230, 230, 230),
        ElementBorder = Color3.fromRGB(210, 210, 210),
        InactiveElement = Color3.fromRGB(200, 200, 200),
        Hover = Color3.fromRGB(220, 220, 220),
        ElementBackground = Color3.fromRGB(245, 245, 245),
        Notification = {
            Success = Color3.fromRGB(40, 180, 100),
            Warning = Color3.fromRGB(235, 130, 20),
            Error = Color3.fromRGB(200, 40, 40),
            Info = Color3.fromRGB(40, 120, 240)
        },
        Shadow = {
            Light = Color3.fromRGB(180, 180, 180),
            Dark = Color3.fromRGB(160, 160, 160)
        }
    },
    Discord = {
        Primary = Color3.fromRGB(54, 57, 63),
        Secondary = Color3.fromRGB(47, 49, 54),
        Tertiary = Color3.fromRGB(64, 68, 75),
        Accent = Color3.fromRGB(114, 137, 218),
        AccentDark = Color3.fromRGB(94, 117, 198),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(220, 220, 220),
        Border = Color3.fromRGB(74, 77, 83),
        PlaceholderText = Color3.fromRGB(150, 150, 150),
        Element = Color3.fromRGB(64, 68, 75),
        ElementBorder = Color3.fromRGB(74, 78, 85),
        InactiveElement = Color3.fromRGB(80, 84, 91),
        Hover = Color3.fromRGB(70, 74, 81),
        ElementBackground = Color3.fromRGB(57, 60, 67),
        Notification = {
            Success = Color3.fromRGB(67, 181, 129),
            Warning = Color3.fromRGB(250, 166, 26),
            Error = Color3.fromRGB(240, 71, 71),
            Info = Color3.fromRGB(114, 137, 218)
        },
        Shadow = {
            Light = Color3.fromRGB(0, 0, 0),
            Dark = Color3.fromRGB(0, 0, 0)
        }
    },
    Aqua = {
        Primary = Color3.fromRGB(19, 21, 33),
        Secondary = Color3.fromRGB(15, 17, 28),
        Tertiary = Color3.fromRGB(25, 27, 40),
        Accent = Color3.fromRGB(0, 191, 255),
        AccentDark = Color3.fromRGB(0, 151, 205),
        Text = Color3.fromRGB(240, 240, 255),
        SubText = Color3.fromRGB(170, 170, 190),
        Border = Color3.fromRGB(40, 45, 60),
        PlaceholderText = Color3.fromRGB(110, 120, 140),
        Element = Color3.fromRGB(30, 33, 45),
        ElementBorder = Color3.fromRGB(40, 43, 55),
        InactiveElement = Color3.fromRGB(55, 60, 75),
        Hover = Color3.fromRGB(35, 38, 50),
        ElementBackground = Color3.fromRGB(25, 27, 40),
        Notification = {
            Success = Color3.fromRGB(40, 200, 150),
            Warning = Color3.fromRGB(255, 170, 40),
            Error = Color3.fromRGB(230, 70, 90),
            Info = Color3.fromRGB(40, 170, 255)
        },
        Shadow = {
            Light = Color3.fromRGB(0, 10, 15),
            Dark = Color3.fromRGB(0, 5, 10)
        }
    }
}

-- Utility functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function tween(instance, properties, duration, easingStyle, easingDirection, delay, callback)
    local tweenInfo = TweenInfo.new(
        duration or 0.3, 
        easingStyle or Enum.EasingStyle.Quint, 
        easingDirection or Enum.EasingDirection.Out,
        0, false, delay or 0
    )
    local tween = TweenService:Create(instance, tweenInfo, properties)
    
    if callback then
        tween.Completed:Connect(callback)
    end
    
    tween:Play()
    return tween
end

local function round(number, decimalPlaces)
    local multiplier = 10 ^ (decimalPlaces or 0)
    return math.floor(number * multiplier + 0.5) / multiplier
end

local function getTextSize(text, font, textSize, frameSize)
    return TextService:GetTextSize(text, textSize, font, frameSize)
end

local function rippleEffect(button, rippleColor, centerRipple)
    local ripple = createInstance("Frame", {
        Name = "Ripple",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = rippleColor or Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.7,
        Position = centerRipple and UDim2.new(0.5, 0, 0.5, 0) or UDim2.fromOffset(Mouse.X - button.AbsolutePosition.X, Mouse.Y - button.AbsolutePosition.Y),
        Size = UDim2.new(0, 0, 0, 0),
        Parent = button
    })
    
    local rippleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
    
    tween(ripple, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    }, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out, 0, function()
        ripple:Destroy()
    end)
end

-- Key system functions
local function saveKeyToFile(key)
    if CryzenHub.KeySettings.SaveKey and writefile then
        writefile(CryzenHub.KeySettings.FileName .. ".cryzenkey", key)
    end
end

local function getKeyFromFile()
    if CryzenHub.KeySettings.SaveKey and readfile and isfile then
        if isfile(CryzenHub.KeySettings.FileName .. ".cryzenkey") then
            return readfile(CryzenHub.KeySettings.FileName .. ".cryzenkey")
        end
    end
    return nil
end

local function getKeyFromWebsite()
    if CryzenHub.KeySettings.GrabKeyFromSite then
        local success, result = pcall(function()
            return game:HttpGet(CryzenHub.KeySettings.KeyUrl)
        end)
        
        if success then
            return result
        end
    end
    return nil
end

local function validateKey(key)
    if typeof(CryzenHub.KeySettings.Key) == "table" then
        for _, validKey in ipairs(CryzenHub.KeySettings.Key) do
            if key == validKey then
                return true
            end
        end
        return false
    else
        return key == CryzenHub.KeySettings.Key
    end
end

-- Create the key system UI
function CryzenHub:CreateKeySystem()
    if not self.KeySystem then
        return true -- Skip key system if disabled
    end
    
    -- Check if key is already saved
    local savedKey = getKeyFromFile()
    if savedKey and validateKey(savedKey) then
        return true
    end
    
    -- Check if key can be fetched from website
    local websiteKey = getKeyFromWebsite()
    if websiteKey and validateKey(websiteKey) then
        saveKeyToFile(websiteKey)
        return true
    end
    
    local themeColors = self.Themes.Default
    
    -- Create key system UI
    local KeySystemGui = createInstance("ScreenGui", {
        Name = "CryzenHubKeySystem",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Handle protection methods for the GUI
    if syn and syn.protect_gui then
        syn.protect_gui(KeySystemGui)
        KeySystemGui.Parent = CoreGui
    elseif gethui then
        KeySystemGui.Parent = gethui()
    else
        KeySystemGui.Parent = CoreGui
    end
    
    local MainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 350, 0, 0), -- Start with 0 height for animation
        Position = UDim2.new(0.5, -175, 0.5, -100),
        BackgroundColor3 = themeColors.Primary,
        BorderSizePixel = 0,
        Parent = KeySystemGui,
        ClipsDescendants = true
    })
    
    local UICorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = MainFrame
    })
    
    local Shadow = createInstance("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 35, 1, 35),
        ZIndex = 0,
        Image = "rbxassetid://5554236805",
        ImageColor3 = themeColors.Shadow.Dark,
        ImageTransparency = 0.4,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        Parent = MainFrame
    })
    
    local TitleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = themeColors.Accent,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TitleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = TitleBar
    })
    
    local FixTitleCorners = createInstance("Frame", {
        Name = "FixTitleCorners",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 1, -5),
        BackgroundColor3 = themeColors.Accent,
        BorderSizePixel = 0,
        Parent = TitleBar
    })
    
    local TitleText = createInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = CryzenHub.KeySettings.Title,
        TextColor3 = themeColors.Text,
        TextSize = 18,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleBar
    })
    
    local CloseButton = createInstance("ImageButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -30, 0, 8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072718412", -- Close icon
        ImageColor3 = themeColors.Text,
        Parent = TitleBar
    })
    
    local ContentFrame = createInstance("Frame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -40, 1, -60),
        Position = UDim2.new(0, 20, 0, 50),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local SubtitleLabel = createInstance("TextLabel", {
        Name = "SubtitleLabel",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = CryzenHub.KeySettings.Subtitle,
        TextColor3 = themeColors.Text,
        TextSize = 16,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = ContentFrame
    })
    
    local NoteLabel = createInstance("TextLabel", {
        Name = "NoteLabel",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundTransparency = 1,
        Text = CryzenHub.KeySettings.Note,
        TextColor3 = themeColors.SubText,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = ContentFrame
    })
    
    local KeyInputFrame = createInstance("Frame", {
        Name = "KeyInputFrame",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 80),
        BackgroundColor3 = themeColors.Secondary,
        BorderSizePixel = 0,
        Parent = ContentFrame
    })
    
    local KeyInputCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = KeyInputFrame
    })
    
    local KeyInput = createInstance("TextBox", {
        Name = "KeyInput",
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "",
        PlaceholderText = "Enter key here...",
        TextColor3 = themeColors.Text,
        PlaceholderColor3 = themeColors.PlaceholderText,
        TextSize = 16,
        Font = Enum.Font.Gotham,
        ClearTextOnFocus = false,
        Parent = KeyInputFrame
    })
    
    local StatusLabel = createInstance("TextLabel", {
        Name = "StatusLabel",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 130),
        BackgroundTransparency = 1,
        Text = "",
        TextColor3 = themeColors.SubText,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = ContentFrame
    })
    
    local ButtonsFrame = createInstance("Frame", {
        Name = "ButtonsFrame",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 160),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = ContentFrame
    })
    
    local SubmitButton = createInstance("TextButton", {
        Name = "SubmitButton",
        Size = UDim2.new(0, 120, 0, 40),
        Position = UDim2.new(1, -120, 0, 0),
        BackgroundColor3 = themeColors.Accent,
        BorderSizePixel = 0,
        Text = "Submit",
        TextColor3 = themeColors.Text,
        TextSize = 16,
        Font = Enum.Font.GothamSemibold,
        Parent = ButtonsFrame
    })
    
    local SubmitButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = SubmitButton
    })
    
    -- Animation
    MainFrame.Size = UDim2.new(0, 350, 0, 0)
    tween(MainFrame, {Size = UDim2.new(0, 350, 0, 250)}, 0.4, Enum.EasingStyle.Quint)
    
    -- Handle key verification
    local attempts = 0
    local keyVerified = false
    
    SubmitButton.MouseButton1Click:Connect(function()
        rippleEffect(SubmitButton, themeColors.Text, true)
        
        if KeyInput.Text == "" then
            StatusLabel.Text = "Please enter a key."
            StatusLabel.TextColor3 = themeColors.Notification.Warning
            return
        end
        
        attempts = attempts + 1
        
        if validateKey(KeyInput.Text) then
            keyVerified = true
            StatusLabel.Text = "Key verified successfully!"
            StatusLabel.TextColor3 = themeColors.Notification.Success
            
            if CryzenHub.KeySettings.SaveKey then
                saveKeyToFile(KeyInput.Text)
            end
            
            -- Animate close
            tween(MainFrame, {Size = UDim2.new(0, 350, 0, 0)}, 0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0.5, function()
                KeySystemGui:Destroy()
            end)
        else
            local remainingAttempts = CryzenHub.KeySettings.MaxAttempts - attempts
            StatusLabel.Text = "Invalid key! " .. (remainingAttempts > 0 and remainingAttempts .. " attempts remaining." or "No attempts remaining.")
            StatusLabel.TextColor3 = themeColors.Notification.Error
            
            if remainingAttempts <= 0 then
                tween(MainFrame, {Size = UDim2.new(0, 350, 0, 0)}, 0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 1, function()
                    KeySystemGui:Destroy()
                end)
            end
        }
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        tween(MainFrame, {Size = UDim2.new(0, 350, 0, 0)}, 0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, function()
            KeySystemGui:Destroy()
        end)
    end)
    
    -- Wait for verification
    while not keyVerified and attempts < CryzenHub.KeySettings.MaxAttempts do
        wait(0.1)
    end
    
    return keyVerified
end

-- Create the main UI
function CryzenHub:CreateWindow(config)
    -- Verify key first
    if not self:CreateKeySystem() then
        return nil
    end
    
    config = config or {}
    local title = config.Title or "CryzenHub v" .. self.Version
    local size = config.Size or UDim2.new(0, 600, 0, 400)
    local theme = config.Theme or "Default"
    local themeColors = typeof(theme) == "table" and theme or self.Themes[theme] or self.Themes.Default
    local defaultTab = config.DefaultTab
    local saveConfig = config.SaveConfig ~= nil and config.SaveConfig or true
    
    -- Initialize the library's UI components
    local ScreenGui = createInstance("ScreenGui", {
        Name = "CryzenHub_" .. game.JobId,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Handle protection methods for the GUI
    if syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = CoreGui
    elseif gethui then
        ScreenGui.Parent = gethui()
    else
        ScreenGui.Parent = CoreGui
    end
    
    -- Create loading screen
    local LoadingFrame = createInstance("Frame", {
        Name = "LoadingFrame",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = themeColors.Primary,
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    
    local LoadingLogo = createInstance("ImageLabel", {
        Name = "LoadingLogo",
        Size = UDim2.new(0, 150, 0, 150),
        Position = UDim2.new(0.5, -75, 0.5, -75),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072725299", -- Placeholder logo
        ImageColor3 = themeColors.Accent,
        ImageTransparency = 0,
        Parent = LoadingFrame
    })
    
    local LoadingText = createInstance("TextLabel", {
        Name = "LoadingText",
        Size = UDim2.new(0, 200, 0, 30),
        Position = UDim2.new(0.5, -100, 0.5, 80),
        BackgroundTransparency = 1,
        Text = "Loading CryzenHub...",
        TextColor3 = themeColors.Text,
        TextSize = 18,
        Font = Enum.Font.GothamSemibold,
        Parent = LoadingFrame
    })
    
    -- Animate loading screen
    tween(LoadingLogo, {Rotation = 360}, 1.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut)
    
    -- Main UI
    local MainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = size,
        Position = UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2),
        BackgroundColor3 = themeColors.Primary,
        BorderSizePixel = 0,
        Visible = false,
        Parent = ScreenGui,
        ClipsDescendants = true
    })
    
    local UICorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = MainFrame
    })
    
    local Shadow = createInstance("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 40, 1, 40),
        ZIndex = 0,
        Image = "rbxassetid://5554236805",
        ImageColor3 = themeColors.Shadow.Dark,
        ImageTransparency = 0.4,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        Parent = MainFrame
    })
    
    local TitleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = themeColors.Accent,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TitleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = TitleBar
    })
    
    local FixTitleCorners = createInstance("Frame", {
        Name = "FixTitleCorners",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 1, -5),
        BackgroundColor3 = themeColors.Accent,
        BorderSizePixel = 0,
        Parent = TitleBar
    })
    
    local TitleText = createInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -150, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = themeColors.Text,
        TextSize = 18,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleBar
    })
    
    local VersionLabel = createInstance("TextLabel", {
        Name = "VersionLabel",
        Size = UDim2.new(0, 80, 0, 20),
        Position = UDim2.new(0, 15, 1, -20),
        BackgroundTransparency = 1,
        Text = "v" .. self.Version,
        TextColor3 = themeColors.Text,
        TextTransparency = 0.4,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleBar
    })
    
    local CloseButton = createInstance("ImageButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -34, 0, 8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072718412", -- Close icon
        ImageColor3 = themeColors.Text,
        Parent = TitleBar
    })
    
    local MinimizeButton = createInstance("ImageButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -68, 0, 8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072718444", -- Minimize icon
        ImageColor3 = themeColors.Text,
        Parent = TitleBar
    })
    
    local SettingsButton = createInstance("ImageButton", {
        Name = "SettingsButton",
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -102, 0, 8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072725299", -- Settings icon
        ImageColor3 = themeColors.Text,
        Parent = TitleBar
    })
    
    -- Container for tabs and content
    local TabContainer = createInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 140, 1, -45),
        Position = UDim2.new(0, 0, 0, 45),
        BackgroundColor3 = themeColors.Secondary,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TabContainerCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = TabContainer
    })
    
    -- Fix the corner radius at the top of the TabContainer
    local FixTabContainerCorner = createInstance("Frame", {
        Name = "FixTabContainerCorner",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = themeColors.Secondary,
        BorderSizePixel = 0,
        Parent = TabContainer
    })
    
    local TabSearchFrame = createInstance("Frame", {
        Name = "TabSearchFrame",
        Size = UDim2.new(1, -20, 0, 35),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundColor3 = themeColors.Tertiary,
        BorderSizePixel = 0,
        Parent = TabContainer
    })
    
    local TabSearchCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = TabSearchFrame
    })
    
    local TabSearchIcon = createInstance("ImageLabel", {
        Name = "TabSearchIcon",
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 8, 0, 10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072714922", -- Search icon
        ImageColor3 = themeColors.SubText,
        Parent = TabSearchFrame
    })
    
    local TabSearchInput = createInstance("TextBox", {
        Name = "TabSearchInput",
        Size = UDim2.new(1, -35, 1, 0),
        Position = UDim2.new(0, 30, 0, 0),
        BackgroundTransparency = 1,
        Text = "",
        PlaceholderText = "Search...",
        TextColor3 = themeColors.Text,
        PlaceholderColor3 = themeColors.SubText,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TabSearchFrame
    })
    
    local TabScrollFrame = createInstance("ScrollingFrame", {
        Name = "TabScrollFrame",
        Size = UDim2.new(1, -10, 1, -55),
        Position = UDim2.new(0, 5, 0, 50),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = themeColors.Accent,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        Parent = TabContainer
    })
    
    local TabScrollListLayout = createInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = TabScrollFrame
    })
    
    local TabScrollPadding = createInstance("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = TabScrollFrame
    })
    
    local ContentContainer = createInstance("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -150, 1, -50),
        Position = UDim2.new(0, 145, 0, 45),
        BackgroundColor3 = themeColors.Primary,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = MainFrame
    })
    
    -- Notification system
    local NotificationContainer = createInstance("Frame", {
        Name = "NotificationContainer",
        Size = UDim2.new(0, 300, 1, -10),
        Position = UDim2.new(1, 10, 0, 5),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local NotificationLayout = createInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = NotificationContainer
    })
    
    local NotificationPadding = createInstance("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10),
        Parent = NotificationContainer
    })
    
    -- Make the window draggable
    local isDragging = false
    local dragInput
    local dragStart
    local startPosition
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPosition = MainFrame.Position
        end
    end)
    
    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and isDragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPosition.X.Scale, 
                startPosition.X.Offset + delta.X, 
                startPosition.Y.Scale, 
                startPosition.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        tween(MainFrame, {Position = UDim2.new(0.5, -size.X.Offset/2, 1.5, 0)}, 0.5, Enum.EasingStyle.Quint, nil, nil, function()
            ScreenGui:Destroy()
        end)
    end)
    
    -- Minimize button functionality
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            tween(MainFrame, {Size = UDim2.new(0, size.X.Offset, 0, 45)}, 0.5, Enum.EasingStyle.Quint)
        else
            tween(MainFrame, {Size = size}, 0.5, Enum.EasingStyle.Quint)
        end
    end)
    
    -- Settings button functionality (to be implemented)
    SettingsButton.MouseButton1Click:Connect(function()
        -- Open settings panel
    end)
    
    -- Window API
    local window = {}
    local tabs = {}
    local currentTab = nil
    
    -- Notification function
    function window:Notify(config)
        config = config or {}
        local title = config.Title or "Notification"
        local content = config.Content or ""
        local duration = config.Duration or 5
        local type = config.Type or "Info"
        
        local typeColors = {
            Success = themeColors.Notification.Success,
            Warning = themeColors.Notification.Warning,
            Error = themeColors.Notification.Error,
            Info = themeColors.Notification.Info
        }
        
        local typeIcons = {
            Success = "rbxassetid://7072718642", -- Success icon
            Warning = "rbxassetid://7072724538", -- Warning icon
            Error = "rbxassetid://7072719752", -- Error icon
            Info = "rbxassetid://7072719338" -- Info icon
        }
        
        local notifColor = typeColors[type] or typeColors.Info
        local notifIcon = typeIcons[type] or typeIcons.Info
        
        local Notification = createInstance("Frame", {
            Name = "Notification",
            Size = UDim2.new(1, -20, 0, 0),
            BackgroundColor3 = themeColors.Tertiary,
            BorderSizePixel = 0,
            Parent = NotificationContainer
        })
        
        local NotificationCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = Notification
        })
        
        local NotificationBar = createInstance("Frame", {
            Name = "NotificationBar",
            Size = UDim2.new(0, 4, 1, 0),
            BackgroundColor3 = notifColor,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Parent = Notification
        })
        
        local NotificationBarCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = NotificationBar
        })
        
        local NotificationIcon = createInstance("ImageLabel", {
            Name = "NotificationIcon",
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(0, 12, 0, 10),
            BackgroundTransparency = 1,
            Image = notifIcon,
            ImageColor3 = notifColor,
            Parent = Notification
        })
        
        local NotificationTitle = createInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -50, 0, 25),
            Position = UDim2.new(0, 40, 0, 5),
            BackgroundTransparency = 1,
            Text = title,
            TextColor3 = themeColors.Text,
            TextSize = 16,
            Font = Enum.Font.GothamSemibold,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = Notification
        })
        
        local NotificationContent = createInstance("TextLabel", {
            Name = "Content",
            Size = UDim2.new(1, -50, 0, 0),
            Position = UDim2.new(0, 40, 0, 30),
            BackgroundTransparency = 1,
            Text = content,
            TextColor3 = themeColors.SubText,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            TextWrapped = true,
            Parent = Notification
        })
        
        local CloseNotifButton = createInstance("ImageButton", {
            Name = "CloseButton",
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(1, -25, 0, 5),
            BackgroundTransparency = 1,
            Image = "rbxassetid://7072718412", -- Close icon
            ImageColor3 = themeColors.SubText,
            Parent = Notification
        })
        
        -- Calculate content height based on text
        local textSize = getTextSize(content, Enum.Font.Gotham, 14, Vector2.new(Notification.AbsoluteSize.X - 50, math.huge))
        local contentHeight = math.max(textSize.Y, 20)  -- Minimum 20 pixels
        NotificationContent.Size = UDim2.new(1, -50, 0, contentHeight)
        
        -- Set notification height
        local totalHeight = 40 + contentHeight
        Notification.Size = UDim2.new(1, -20, 0, 0)
        
        -- Animate notification appearing
        tween(Notification, {Size = UDim2.new(1, -20, 0, totalHeight)}, 0.3, Enum.EasingStyle.Quint)
        
        -- Progress bar animation
        local ProgressBar = createInstance("Frame", {
            Name = "ProgressBar",
            Size = UDim2.new(1, 0, 0, 2),
            Position = UDim2.new(0, 0, 1, -2),
            BackgroundColor3 = notifColor,
            BorderSizePixel = 0,
            Parent = Notification
        })
        
        tween(ProgressBar, {Size = UDim2.new(0, 0, 0, 2)}, duration, Enum.EasingStyle.Linear)
        
        -- Close notification function
        local function closeNotification()
            tween(Notification, {Size = UDim2.new(1, -20, 0, 0)}, 0.3, Enum.EasingStyle.Quint, nil, nil, function()
                Notification:Destroy()
            end)
        end
        
        CloseNotifButton.MouseButton1Click:Connect(closeNotification)
        
        -- Auto-close after duration
        delay(duration, closeNotification)
        
        return Notification
    end
    
    -- Change theme function
    function window:ChangeTheme(newTheme)
        themeColors = typeof(newTheme) == "table" and newTheme or self.Themes[newTheme] or self.Themes.Default
        
        -- Update UI colors
        MainFrame.BackgroundColor3 = themeColors.Primary
        TitleBar.BackgroundColor3 = themeColors.Accent
        FixTitleCorners.BackgroundColor3 = themeColors.Accent
        TitleText.TextColor3 = themeColors.Text
        VersionLabel.TextColor3 = themeColors.Text
        TabContainer.BackgroundColor3 = themeColors.Secondary
        FixTabContainerCorner.BackgroundColor3 = themeColors.Secondary
        TabSearchFrame.BackgroundColor3 = themeColors.Tertiary
        TabSearchIcon.ImageColor3 = themeColors.SubText
        TabSearchInput.TextColor3 = themeColors.Text
        TabSearchInput.PlaceholderColor3 = themeColors.SubText
        ContentContainer.BackgroundColor3 = themeColors.Primary
        Shadow.ImageColor3 = themeColors.Shadow.Dark
        CloseButton.ImageColor3 = themeColors.Text
        MinimizeButton.ImageColor3 = themeColors.Text
        SettingsButton.ImageColor3 = themeColors.Text
        
        -- Update tab buttons
        for _, tab in pairs(tabs) do
            if currentTab == tab.Container then
                tab.Button.BackgroundColor3 = themeColors.Accent
                tab.Button.IconImage.ImageColor3 = themeColors.Text
                tab.Button.TitleLabel.TextColor3 = themeColors.Text
            else
                tab.Button.BackgroundColor3 = themeColors.Tertiary
                tab.Button.IconImage.ImageColor3 = themeColors.SubText
                tab.Button.TitleLabel.TextColor3 = themeColors.SubText
            end
        end
        
        -- Update all UI elements (this would need to be implemented for all element types)
        for _, tab in pairs(tabs) do
            for _, section in pairs(tab.Sections or {}) do
                section.Frame.BackgroundColor3 = themeColors.Secondary
                section.TitleLabel.TextColor3 = themeColors.Text
                
                for _, element in pairs(section.Elements or {}) do
                    if element.UpdateTheme then
                        element:UpdateTheme(themeColors)
                    end
                end
            end
        end
    end
    
    function window:CreateTab(name, icon)
        local iconId = icon or ""
        
        local tabButton = createInstance("Frame", {
            Name = name.."Tab",
            Size = UDim2.new(1, -10, 0, 36),
            BackgroundColor3 = themeColors.Tertiary,
            BorderSizePixel = 0,
            Parent = TabScrollFrame
        })
        
        local tabButtonCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tabButton
        })
        
        local tabButtonRipple = createInstance("Frame", {
            Name = "Ripple",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ClipsDescendants = true,
            Parent = tabButton
        })
        
        local tabButtonClickRegion = createInstance("TextButton", {
            Name = "ClickRegion",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            Parent = tabButton
        })
        
        local iconImage = createInstance("ImageLabel", {
            Name = "IconImage",
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(0, 8, 0.5, -10),
            BackgroundTransparency = 1,
            Image = iconId,
            ImageColor3 = themeColors.SubText,
            Parent = tabButton
        })
        
        local titleLabel = createInstance("TextLabel", {
            Name = "TitleLabel",
            Size = UDim2.new(1, -40, 1, 0),
            Position = UDim2.new(0, 36, 0, 0),
            BackgroundTransparency = 1,
            Text = name,
            TextColor3 = themeColors.SubText,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = tabButton
        })
        
        local tabPage = createInstance("ScrollingFrame", {
            Name = name.."Page",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = themeColors.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Visible = false,
            Parent = ContentContainer
        })
        
        local tabPagePadding = createInstance("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            Parent = tabPage
        })
        
        local tabPageListLayout = createInstance("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
            Parent = tabPage
        })
        
        -- Tab selection logic
        tabButtonClickRegion.MouseButton1Click:Connect(function()
            rippleEffect(tabButtonRipple, themeColors.Accent, true)
            
            if currentTab then
                currentTab.Visible = false
                
                for _, tab in pairs(tabs) do
                    if tab.Button == tabButton then
                        tween(tab.Button, {BackgroundColor3 = themeColors.Accent}, 0.3, Enum.EasingStyle.Quint)
                        tween(tab.Button.IconImage, {ImageColor3 = themeColors.Text}, 0.3, Enum.EasingStyle.Quint)
                        tween(tab.Button.TitleLabel, {TextColor3 = themeColors.Text}, 0.3, Enum.EasingStyle.Quint)
                    else
                        tween(tab.Button, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
                        tween(tab.Button.IconImage, {ImageColor3 = themeColors.SubText}, 0.3, Enum.EasingStyle.Quint)
                        tween(tab.Button.TitleLabel, {TextColor3 = themeColors.SubText}, 0.3, Enum.EasingStyle.Quint)
                    end
                end
            end
            
            tabPage.Visible = true
            currentTab = tabPage
        end)
        
        -- Tab hover effects
        tabButtonClickRegion.MouseEnter:Connect(function()
            if currentTab ~= tabPage then
                tween(tabButton, {BackgroundColor3 = themeColors.Hover}, 0.3, Enum.EasingStyle.Quint)
            end
        end)
        
        tabButtonClickRegion.MouseLeave:Connect(function()
            if currentTab ~= tabPage then
                tween(tabButton, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
            end
        end)
        
        local tab = {
            Button = tabButton,
            Container = tabPage,
            Sections = {},
            Name = name
        }
        
        table.insert(tabs, tab)
        
        -- If this is the first tab or matches the default tab, select it
        if #tabs == 1 or (defaultTab and defaultTab == name) then
            tabButton.BackgroundColor3 = themeColors.Accent
            iconImage.ImageColor3 = themeColors.Text
            titleLabel.TextColor3 = themeColors.Text
            tabPage.Visible = true
            currentTab = tabPage
        end
        
        -- Tab API
        local tabAPI = {}
        
        -- Section container for better organization
        function tabAPI:CreateSection(name)
            local sectionFrame = createInstance("Frame", {
                Name = name.."Section",
                Size = UDim2.new(1, 0, 0, 40), -- Initial size, will be adjusted
                BackgroundColor3 = themeColors.Secondary,
                BorderSizePixel = 0,
                Parent = tabPage
            })
            
            local sectionCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = sectionFrame
            })
            
            local sectionTitleBar = createInstance("Frame", {
                Name = "SectionTitleBar",
                Size = UDim2.new(1, 0, 0, 36),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Parent = sectionFrame
            })
            
            local sectionTitleLabel = createInstance("TextLabel", {
                Name = "SectionTitleLabel",
                Size = UDim2.new(1, -40, 1, 0),
                Position = UDim2.new(0, 15, 0, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = themeColors.Text,
                TextSize = 15,
                Font = Enum.Font.GothamSemibold,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sectionTitleBar
            })
            
            local sectionToggleArrow = createInstance("ImageLabel", {
                Name = "SectionToggleArrow",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(1, -30, 0.5, -8),
                BackgroundTransparency = 1,
                Image = "rbxassetid://7072715646", -- Arrow icon
                ImageColor3 = themeColors.Text,
                Rotation = 0, -- Down means expanded
                Parent = sectionTitleBar
            })
            
            local sectionToggleButton = createInstance("TextButton", {
                Name = "SectionToggleButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "",
                Parent = sectionTitleBar
            })
            
            local sectionContent = createInstance("Frame", {
                Name = "SectionContent",
                Size = UDim2.new(1, -30, 0, 0), -- Will be resized dynamically
                Position = UDim2.new(0, 15, 0, 36),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Parent = sectionFrame
            })
            
            local sectionContentLayout = createInstance("UIListLayout", {
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Parent = sectionContent
            })
            
            -- Update section size when content changes
            local function updateSectionSize()
                local contentSize = sectionContentLayout.AbsoluteContentSize.Y
                sectionContent.Size = UDim2.new(1, -30, 0, contentSize)
                sectionFrame.Size = UDim2.new(1, 0, 0, contentSize + 44) -- 44 for padding and title
            end
            
            sectionContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSectionSize)
            
            -- Section toggle functionality
            local sectionExpanded = true
            
            sectionToggleButton.MouseButton1Click:Connect(function()
                sectionExpanded = not sectionExpanded
                
                if sectionExpanded then
                    tween(sectionToggleArrow, {Rotation = 0}, 0.3, Enum.EasingStyle.Quint)
                    updateSectionSize()
                    tween(sectionContent, {Size = UDim2.new(1, -30, 0, sectionContentLayout.AbsoluteContentSize.Y)}, 0.3, Enum.EasingStyle.Quint)
                    tween(sectionFrame, {Size = UDim2.new(1, 0, 0, sectionContentLayout.AbsoluteContentSize.Y + 44)}, 0.3, Enum.EasingStyle.Quint)
                else
                    tween(sectionToggleArrow, {Rotation = -90}, 0.3, Enum.EasingStyle.Quint)
                    tween(sectionContent, {Size = UDim2.new(1, -30, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
                    tween(sectionFrame, {Size = UDim2.new(1, 0, 0, 40)}, 0.3, Enum.EasingStyle.Quint)
                end
            end)
            
            local section = {
                Frame = sectionFrame,
                Content = sectionContent,
                TitleLabel = sectionTitleLabel,
                Elements = {}
            }
            
            table.insert(tab.Sections, section)
            
            -- Section API
            local sectionAPI = {}
            
            -- Button element
            function sectionAPI:CreateButton(config)
                config = config or {}
                local text = config.Text or "Button"
                local tooltip = config.Tooltip
                local callback = config.Callback or function() end
                
                local buttonFrame = createInstance("Frame", {
                    Name = text.."ButtonFrame",
                    Size = UDim2.new(1, 0, 0, 36),
                    BackgroundColor3 = themeColors.Tertiary,
                    BorderSizePixel = 0,
                    Parent = sectionContent
                })
                
                local buttonCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = buttonFrame
                })
                
                local buttonRipple = createInstance("Frame", {
                    Name = "ButtonRipple",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    ClipsDescendants = true,
                    BorderSizePixel = 0,
                    Parent = buttonFrame
                })
                
                local buttonLabel = createInstance("TextLabel", {
                    Name = "ButtonLabel",
                    Size = UDim2.new(1, -20, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = themeColors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = buttonFrame
                })
                
                local button = createInstance("TextButton", {
                    Name = "Button",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = "",
                    Parent = buttonFrame
                })
                
                -- Tooltip functionality
                if tooltip then
                    local tooltipFrame = createInstance("Frame", {
                        Name = "TooltipFrame",
                        Size = UDim2.new(0, 200, 0, 30),
                        BackgroundColor3 = themeColors.Tertiary,
                        BorderSizePixel = 0,
                        Visible = false,
                        Parent = ScreenGui
                    })
                    
                    local tooltipCorner = createInstance("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = tooltipFrame
                    })
                    
                    local tooltipLabel = createInstance("TextLabel", {
                        Name = "TooltipLabel",
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 5, 0, 0),
                        BackgroundTransparency = 1,
                        Text = tooltip,
                        TextColor3 = themeColors.Text,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextWrapped = true,
                        Parent = tooltipFrame
                    })
                    
                    button.MouseEnter:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                        tooltipFrame.Visible = true
                    end)
                    
                    button.MouseLeave:Connect(function()
                        tooltipFrame.Visible = false
                    end)
                    
                    button.MouseMoved:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                    end)
                end
                
                -- Button animations and functionality
                button.MouseButton1Click:Connect(function()
                    rippleEffect(buttonRipple, themeColors.Accent)
                    tween(buttonFrame, {BackgroundColor3 = themeColors.Accent}, 0.2, Enum.EasingStyle.Quint)
                    callback()
                    tween(buttonFrame, {BackgroundColor3 = themeColors.Tertiary}, 0.2, Enum.EasingStyle.Quint)
                end)
                
                button.MouseEnter:Connect(function()
                    tween(buttonFrame, {BackgroundColor3 = themeColors.Hover}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                button.MouseLeave:Connect(function()
                    tween(buttonFrame, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                local buttonAPI = {
                    Instance = buttonFrame,
                    UpdateTheme = function(self, colors)
                        buttonFrame.BackgroundColor3 = colors.Tertiary
                        buttonLabel.TextColor3 = colors.Text
                    end,
                    SetText = function(self, newText)
                        buttonLabel.Text = newText
                    end
                }
                
                table.insert(section.Elements, buttonAPI)
                updateSectionSize()
                return buttonAPI
            end
            
            -- Toggle element
            function sectionAPI:CreateToggle(config)
                config = config or {}
                local text = config.Text or "Toggle"
                local default = config.Default or false
                local tooltip = config.Tooltip
                local callback = config.Callback or function() end
                
                local toggleFrame = createInstance("Frame", {
                    Name = text.."ToggleFrame",
                    Size = UDim2.new(1, 0, 0, 36),
                    BackgroundColor3 = themeColors.Tertiary,
                    BorderSizePixel = 0,
                    Parent = sectionContent
                })
                
                local toggleCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = toggleFrame
                })
                
                local toggleLabel = createInstance("TextLabel", {
                    Name = "ToggleLabel",
                    Size = UDim2.new(1, -60, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = themeColors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = toggleFrame
                })
                
                local toggleBackground = createInstance("Frame", {
                    Name = "ToggleBackground",
                    Size = UDim2.new(0, 40, 0, 20),
                    Position = UDim2.new(1, -50, 0.5, -10),
                    BackgroundColor3 = default and themeColors.Accent or themeColors.InactiveElement,
                    BorderSizePixel = 0,
                    Parent = toggleFrame
                })
                
                local toggleBackgroundCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggleBackground
                })
                
                local toggleCircle = createInstance("Frame", {
                    Name = "ToggleCircle",
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(default and 1 or 0, default and -18 or 2, 0.5, -8),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Parent = toggleBackground
                })
                
                local toggleCircleCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggleCircle
                })
                
                local toggleButton = createInstance("TextButton", {
                    Name = "ToggleButton",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = "",
                    Parent = toggleFrame
                })
                
                -- Tooltip functionality
                if tooltip then
                    local tooltipFrame = createInstance("Frame", {
                        Name = "TooltipFrame",
                        Size = UDim2.new(0, 200, 0, 30),
                        BackgroundColor3 = themeColors.Tertiary,
                        BorderSizePixel = 0,
                        Visible = false,
                        Parent = ScreenGui
                    })
                    
                    local tooltipCorner = createInstance("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = tooltipFrame
                    })
                    
                    local tooltipLabel = createInstance("TextLabel", {
                        Name = "TooltipLabel",
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 5, 0, 0),
                        BackgroundTransparency = 1,
                        Text = tooltip,
                        TextColor3 = themeColors.Text,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextWrapped = true,
                        Parent = tooltipFrame
                    })
                    
                    toggleButton.MouseEnter:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                        tooltipFrame.Visible = true
                    end)
                    
                    toggleButton.MouseLeave:Connect(function()
                        tooltipFrame.Visible = false
                    end)
                    
                    toggleButton.MouseMoved:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                    end)
                end
                
                local toggled = default
                
                local function updateToggle()
                    toggled = not toggled
                    tween(toggleCircle, {Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)}, 0.3, Enum.EasingStyle.Quint)
                    tween(toggleBackground, {BackgroundColor3 = toggled and themeColors.Accent or themeColors.InactiveElement}, 0.3, Enum.EasingStyle.Quint)
                    callback(toggled)
                end
                
                toggleButton.MouseButton1Click:Connect(function()
                    rippleEffect(toggleFrame, themeColors.Accent, true)
                    updateToggle()
                end)
                
                toggleButton.MouseEnter:Connect(function()
                    tween(toggleFrame, {BackgroundColor3 = themeColors.Hover}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                toggleButton.MouseLeave:Connect(function()
                    tween(toggleFrame, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                local toggleAPI = {
                    Instance = toggleFrame,
                    Set = function(self, value)
                        if toggled ~= value then
                            updateToggle()
                        end
                    end,
                    Get = function(self)
                        return toggled
                    end,
                    UpdateTheme = function(self, colors)
                        toggleFrame.BackgroundColor3 = colors.Tertiary
                        toggleLabel.TextColor3 = colors.Text
                        toggleBackground.BackgroundColor3 = toggled and colors.Accent or colors.InactiveElement
                    end,
                    SetText = function(self, newText)
                        toggleLabel.Text = newText
                    end
                }
                
                table.insert(section.Elements, toggleAPI)
                updateSectionSize()
                return toggleAPI
            end
            
            -- Slider element
            function sectionAPI:CreateSlider(config)
                config = config or {}
                local text = config.Text or "Slider"
                local min = config.Min or 0
                local max = config.Max or 100
                local default = math.clamp(config.Default or min, min, max)
                local precise = config.Precise or false
                local tooltip = config.Tooltip
                local suffix = config.Suffix or ""
                local callback = config.Callback or function() end
                
                local sliderFrame = createInstance("Frame", {
                    Name = text.."SliderFrame",
                    Size = UDim2.new(1, 0, 0, 50),
                    BackgroundColor3 = themeColors.Tertiary,
                    BorderSizePixel = 0,
                    Parent = sectionContent
                })
                
                local sliderCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = sliderFrame
                })
                
                local sliderLabel = createInstance("TextLabel", {
                    Name = "SliderLabel",
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 10, 0, 6),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = themeColors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = sliderFrame
                })
                
                local sliderValueLabel = createInstance("TextLabel", {
                    Name = "SliderValueLabel",
                    Size = UDim2.new(0, 60, 0, 20),
                    Position = UDim2.new(1, -70, 0, 6),
                    BackgroundTransparency = 1,
                    Text = tostring(default) .. suffix,
                    TextColor3 = themeColors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    Parent = sliderFrame
                })
                
                local sliderBackground = createInstance("Frame", {
                    Name = "SliderBackground",
                    Size = UDim2.new(1, -20, 0, 6),
                    Position = UDim2.new(0, 10, 0, 32),
                    BackgroundColor3 = themeColors.InactiveElement,
                    BorderSizePixel = 0,
                    Parent = sliderFrame
                })
                
                local sliderBackgroundCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderBackground
                })
                
                local sliderFill = createInstance("Frame", {
                    Name = "SliderFill",
                    Size = UDim2.new(((default - min) / (max - min)), 0, 1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    BackgroundColor3 = themeColors.Accent,
                    BorderSizePixel = 0,
                    Parent = sliderBackground
                })
                
                local sliderFillCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderFill
                })
                
                local sliderCircle = createInstance("Frame", {
                    Name = "SliderCircle",
                    Size = UDim2.new(0, 14, 0, 14),
                    Position = UDim2.new(((default - min) / (max - min)), -7, 0.5, -7),
                    BackgroundColor3 = themeColors.Accent,
                    BorderSizePixel = 0,
                    Parent = sliderBackground
                })
                
                local sliderCircleCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderCircle
                })
                
                local sliderButton = createInstance("TextButton", {
                    Name = "SliderButton",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Text = "",
                    Parent = sliderFrame
                })
                
                -- Tooltip functionality
                if tooltip then
                    local tooltipFrame = createInstance("Frame", {
                        Name = "TooltipFrame",
                        Size = UDim2.new(0, 200, 0, 30),
                        BackgroundColor3 = themeColors.Tertiary,
                        BorderSizePixel = 0,
                        Visible = false,
                        Parent = ScreenGui
                    })
                    
                    local tooltipCorner = createInstance("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = tooltipFrame
                    })
                    
                    local tooltipLabel = createInstance("TextLabel", {
                        Name = "TooltipLabel",
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 5, 0, 0),
                        BackgroundTransparency = 1,
                        Text = tooltip,
                        TextColor3 = themeColors.Text,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextWrapped = true,
                        Parent = tooltipFrame
                    })
                    
                    sliderButton.MouseEnter:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                        tooltipFrame.Visible = true
                    end)
                    
                    sliderButton.MouseLeave:Connect(function()
                        tooltipFrame.Visible = false
                    end)
                    
                    sliderButton.MouseMoved:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                    end)
                end
                
                local value = default
                
                local function updateSlider(input)
                    local sizeX = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
                    local newValue = min + ((max - min) * sizeX)
                    
                    if not precise then
                        newValue = math.floor(newValue)
                    else
                        newValue = round(newValue, 2)
                    end
                    
                    value = newValue
                    sliderValueLabel.Text = tostring(value) .. suffix
                    tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1, Enum.EasingStyle.Quint)
                    tween(sliderCircle, {Position = UDim2.new(sizeX, -7, 0.5, -7)}, 0.1, Enum.EasingStyle.Quint)
                    callback(value)
                end
                
                sliderButton.MouseButton1Down:Connect(function()
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            updateSlider(input)
                        end
                    end)
                    
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then
                                connection:Disconnect()
                            end
                        end
                    end)
                    
                    rippleEffect(sliderFrame, themeColors.Accent, true)
                    updateSlider(UserInputService:GetMouseLocation())
                end)
                
                sliderButton.MouseEnter:Connect(function()
                    tween(sliderFrame, {BackgroundColor3 = themeColors.Hover}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                sliderButton.MouseLeave:Connect(function()
                    tween(sliderFrame, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                local sliderAPI = {
                    Instance = sliderFrame,
                    Set = function(self, newValue)
                        newValue = math.clamp(newValue, min, max)
                        if not precise then
                            newValue = math.floor(newValue)
                        else
                            newValue = round(newValue, 2)
                        end
                        
                        value = newValue
                        local sizeX = (value - min) / (max - min)
                        sliderValueLabel.Text = tostring(value) .. suffix
                        tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1, Enum.EasingStyle.Quint)
                        tween(sliderCircle, {Position = UDim2.new(sizeX, -7, 0.5, -7)}, 0.1, Enum.EasingStyle.Quint)
                        callback(value)
                    end,
                    Get = function(self)
                        return value
                    end,
                    UpdateTheme = function(self, colors)
                        sliderFrame.BackgroundColor3 = colors.Tertiary
                        sliderLabel.TextColor3 = colors.Text
                        sliderValueLabel.TextColor3 = colors.Text
                        sliderBackground.BackgroundColor3 = colors.InactiveElement
                        sliderFill.BackgroundColor3 = colors.Accent
                        sliderCircle.BackgroundColor3 = colors.Accent
                    end,
                    SetText = function(self, newText)
                        sliderLabel.Text = newText
                    end
                }
                
                table.insert(section.Elements, sliderAPI)
                updateSectionSize()
                return sliderAPI
            end
            
            -- Add more UI elements here...
            
            -- Dropdown element
            function sectionAPI:CreateDropdown(config)
                config = config or {}
                local text = config.Text or "Dropdown"
                local options = config.Options or {}
                local default = config.Default or nil
                local tooltip = config.Tooltip
                local callback = config.Callback or function() end
                
                local dropdownFrame = createInstance("Frame", {
                    Name = text.."DropdownFrame",
                    Size = UDim2.new(1, 0, 0, 36),
                    BackgroundColor3 = themeColors.Tertiary,
                    BorderSizePixel = 0,
                    ClipsDescendants = true,
                    Parent = sectionContent
                })
                
                local dropdownCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = dropdownFrame
                })
                
                local dropdownLabel = createInstance("TextLabel", {
                    Name = "DropdownLabel",
                    Size = UDim2.new(1, -30, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = themeColors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = dropdownFrame
                })
                
                local dropdownArrow = createInstance("ImageLabel", {
                    Name = "DropdownArrow",
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(1, -25, 0.5, -8),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://7072715646", -- Arrow icon
                    ImageColor3 = themeColors.Text,
                    Rotation = 0,
                    Parent = dropdownFrame
                })
                
                local dropdownButton = createInstance("TextButton", {
                    Name = "DropdownButton",
                    Size = UDim2.new(1, 0, 0, 36),
                    BackgroundTransparency = 1,
                    Text = "",
                    Parent = dropdownFrame
                })
                
                local dropdownSelectedValue = createInstance("TextLabel", {
                    Name = "DropdownSelectedValue",
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 10, 1, 0),
                    BackgroundTransparency = 1,
                    Text = default or "",
                    TextColor3 = themeColors.SubText,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = dropdownFrame
                })
                
                local dropdownContent = createInstance("Frame", {
                    Name = "DropdownContent",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 36),
                    BackgroundColor3 = themeColors.Tertiary,
                    BorderSizePixel = 0,
                    Parent = dropdownFrame
                })
                
                local dropdownContentLayout = createInstance("UIListLayout", {
                    FillDirection = Enum.FillDirection.Vertical,
                    HorizontalAlignment = Enum.HorizontalAlignment.Left,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = dropdownContent
                })
                
                -- Tooltip functionality
                if tooltip then
                    local tooltipFrame = createInstance("Frame", {
                        Name = "TooltipFrame",
                        Size = UDim2.new(0, 200, 0, 30),
                        BackgroundColor3 = themeColors.Tertiary,
                        BorderSizePixel = 0,
                        Visible = false,
                        Parent = ScreenGui
                    })
                    
                    local tooltipCorner = createInstance("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = tooltipFrame
                    })
                    
                    local tooltipLabel = createInstance("TextLabel", {
                        Name = "TooltipLabel",
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 5, 0, 0),
                        BackgroundTransparency = 1,
                        Text = tooltip,
                        TextColor3 = themeColors.Text,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextWrapped = true,
                        Parent = tooltipFrame
                    })
                    
                    dropdownButton.MouseEnter:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                        tooltipFrame.Visible = true
                    end)
                    
                    dropdownButton.MouseLeave:Connect(function()
                        tooltipFrame.Visible = false
                    end)
                    
                    dropdownButton.MouseMoved:Connect(function()
                        tooltipFrame.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 15)
                    end)
                end
                
                -- Create option buttons
                for i, option in ipairs(options) do
                    local optionButton = createInstance("TextButton", {
                        Name = option.."Option",
                        Size = UDim2.new(1, 0, 0, 30),
                        BackgroundTransparency = 1,
                        Text = option,
                        TextColor3 = themeColors.SubText,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Position = UDim2.new(0, 10, 0, 0),
                        Parent = dropdownContent
                    })
                    
                    optionButton.MouseEnter:Connect(function()
                        tween(optionButton, {BackgroundTransparency = 0.9, TextColor3 = themeColors.Text}, 0.2, Enum.EasingStyle.Quint)
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        tween(optionButton, {BackgroundTransparency = 1, TextColor3 = themeColors.SubText}, 0.2, Enum.EasingStyle.Quint)
                    end)
                end
                
                local isOpen = false
                local selected = default
                
                local function updateDropdown()
                    isOpen = not isOpen
                    
                    local contentSize = 0
                    for i, _ in ipairs(options) do
                        contentSize = contentSize + 30
                    end
                    
                    if isOpen then
                        tween(dropdownArrow, {Rotation = 180}, 0.3, Enum.EasingStyle.Quint)
                        tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 36 + contentSize)}, 0.3, Enum.EasingStyle.Quint)
                    else
                        tween(dropdownArrow, {Rotation = 0}, 0.3, Enum.EasingStyle.Quint)
                        tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 36)}, 0.3, Enum.EasingStyle.Quint)
                    end
                    
                    updateSectionSize()
                end
                
                dropdownButton.MouseButton1Click:Connect(function()
                    rippleEffect(dropdownFrame, themeColors.Accent, true)
                    updateDropdown()
                end)
                
                dropdownButton.MouseEnter:Connect(function()
                    tween(dropdownFrame, {BackgroundColor3 = themeColors.Hover}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                dropdownButton.MouseLeave:Connect(function()
                    tween(dropdownFrame, {BackgroundColor3 = themeColors.Tertiary}, 0.3, Enum.EasingStyle.Quint)
                end)
                
                -- Handle option selection
                for _, child in ipairs(dropdownContent:GetChildren()) do
                    if child:IsA("TextButton") then
                        child.MouseButton1Click:Connect(function()
                            selected = child.Text
                            dropdownSelectedValue.Text = selected
                            updateDropdown()
                            callback(selected)
                        end)
                    end
                end
                
                if default then
                    dropdownSelectedValue.Text = default
                    callback(default)
                end
                
                local dropdownAPI = {
                    Instance = dropdownFrame,
                    Set = function(self, option)
                        if table.find(options, option) then
                            selected = option
                            dropdownSelectedValue.Text = selected
                            callback(selected)
                        end
                    end,
                    Get = function(self)
                        return selected
                    end,
                    Refresh = function(self, newOptions, newDefault)
                        options = newOptions or options
                        
                        -- Clear existing options
                        for _, child in ipairs(dropdownContent:GetChildren()) do
                            if child:IsA("TextButton") then
                                child:Destroy()
                            end
                        end
                        
                        -- Add new options
                        for i, option in ipairs(options) do
                            local optionButton = createInstance("TextButton", {
                                Name = option.."Option",
                                Size = UDim2.new(1, 0, 0, 30),
                                BackgroundTransparency = 1,
                                Text = option,
                                TextColor3 = themeColors.SubText,
                                TextSize = 14,
                                Font = Enum.Font.Gotham,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                Position = UDim2.new(0, 10, 0, 0),
                                Parent = dropdownContent
                            })
                            
                            optionButton.MouseEnter:Connect(function()
                                tween(optionButton, {BackgroundTransparency = 0.9, TextColor3 = themeColors.Text}, 0.2, Enum.EasingStyle.Quint)
                            end)
                            
                            optionButton.MouseLeave:Connect(function()
                                tween(optionButton, {BackgroundTransparency = 1, TextColor3 = themeColors.SubText}, 0.2, Enum.EasingStyle.Quint)
                            end)
                            
                            optionButton.MouseButton1Click:Connect(function()
                                selected = option
                                dropdownSelectedValue.Text = selected
                                updateDropdown()
                                callback(selected)
                            end)
                        end
                        
                        -- Update default if provided
                        if newDefault and table.find(options, newDefault) then
                            selected = newDefault
                            dropdownSelectedValue.Text = newDefault
                            callback(newDefault)
                        end
                        
                        -- If dropdown is open, refresh its size
                        if isOpen then
                            local contentSize = 0
                            for i, _ in ipairs(options) do
                                contentSize = contentSize + 30
                            end
                            dropdownFrame.Size = UDim2.new(1, 0, 0, 36 + contentSize)
                            updateSectionSize()
                        end
                    end,
                    UpdateTheme = function(self, colors)
                        dropdownFrame.BackgroundColor3 = colors.Tertiary
                        dropdownLabel.TextColor3 = colors.Text
                        dropdownArrow.ImageColor3 = colors.Text
                        dropdownSelectedValue.TextColor3 = colors.SubText
                        dropdownContent.BackgroundColor3 = colors.Tertiary
                        
                        for _, child in ipairs(dropdownContent:GetChildren()) do
                            if child:IsA("TextButton") then
                                child.TextColor3 = colors.SubText
                            end
                        end
                    end,
                    SetText = function(self, newText)
                        dropdownLabel.Text = newText
                    end
                }
                
                table.insert(section.Elements, dropdownAPI)
                updateSectionSize()
                return dropdownAPI
            end
            
            -- More UI elements...
            
            return sectionAPI
        end
        
        -- Add direct UI elements to the tab (without sections)
        function tabAPI:CreateButton(config)
            return self:CreateSection(""):CreateButton(config)
        end
        
        function tabAPI:CreateToggle(config)
            return self:CreateSection(""):CreateToggle(config)
        end
        
        function tabAPI:CreateSlider(config)
            return self:CreateSection(""):CreateSlider(config)
        end
        
        function tabAPI:CreateDropdown(config)
            return self:CreateSection(""):CreateDropdown(config)
        end
        
        -- More direct element creators...
        
        return tabAPI
    end
    
    -- Search functionality
    TabSearchInput:GetPropertyChangedSignal("Text"):Connect(function()
        local searchText = TabSearchInput.Text:lower()
        
        if searchText == "" then
            -- Show all tabs
            for _, tab in ipairs(tabs) do
                tab.Button.Visible = true
            end
        else
            -- Filter tabs
            for _, tab in ipairs(tabs) do
                local tabName = tab.Name:lower()
                tab.Button.Visible = string.find(tabName, searchText) ~= nil
            end
        end
    end)
    
    -- Finish loading animation and show main UI
    wait(1.5) -- Simulated loading time
    tween(LoadingLogo, {ImageTransparency = 1}, 0.5, Enum.EasingStyle.Quint)
    tween(LoadingText, {TextTransparency = 1}, 0.5, Enum.EasingStyle.Quint)
    tween(LoadingFrame, {BackgroundTransparency = 1}, 0.5, Enum.EasingStyle.Quint, nil, nil, function()
        LoadingFrame:Destroy()
        MainFrame.Visible = true
        MainFrame.Size = UDim2.new(0, size.X.Offset, 0, 0)
        MainFrame.Position = UDim2.new(0.5, -size.X.Offset/2, 0.5, 0)
        tween(MainFrame, {Size = size, Position = UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2)}, 0.5, Enum.EasingStyle.Quint)
    end)
    
    return window
end

return CryzenHub
